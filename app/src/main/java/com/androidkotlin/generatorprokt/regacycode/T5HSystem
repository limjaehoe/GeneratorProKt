package com.dkms.d5n.serial;

import static com.dkms.d5n.AtvOscilloscope.BoostList;
import static com.dkms.d5n.AtvOscilloscope.PreheatList;
import static com.dkms.d5n.AtvOscilloscope.ReadyList;
import static com.dkms.d5n.AtvOscilloscope.RunningList;
import static com.dkms.d5n.AtvOscilloscope.Scope_ScanData;
import static com.dkms.d5n.AtvOscilloscope.StartingList;
import static com.dkms.d5n.MainActivity.auxSelect;
import static com.dkms.d5n.MainActivity.buckySelect;
import static com.dkms.d5n.MainActivity.mainFocusControl;
import static com.dkms.d5n.MainActivity.opMgr;
import static com.dkms.d5n.MainActivity.patientSizeSelectDisplay;
import static com.dkms.d5n.t5h.manager.AECCaliTableManager.FindFinalAECDACValueTable;
import static com.dkms.d5n.t5h.manager.KvCaliTableManager.FindFinalKvDACValueTable;
import static com.dkms.d5n.t5h.manager.MaCaliTableManager.FindFinalMaDACValueTable;
import static com.dkms.d5n.t5h.manager.MsCaliTableManager.FindFinalMsGapValueTable;
import static com.dkms.d5n.t5h.manager.TubeTableManager.FindFinalMasValue;
import static com.dkms.d5n.t5h.manager.TubeTableManager.FindFinalMsValue;
import static com.dkms.d5n.t5h.manager.TubeTableManager.FindMsZeroMaValueFinal;
import static com.dkms.d5n.view.MainCenterView.aec_LinearLayout;
import static com.dkms.d5n.view.MainTopView.seekbarKv;
import static com.dkms.d5n.view.MainTopView.txtMsFix;
import static com.dkms.d5n.view.MainTopView.txtSecFix;

import android.app.ActivityManager;
import android.content.ComponentName;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.AnimationDrawable;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import androidx.annotation.Nullable;

import com.dkms.d5n.R;
import com.dkms.d5n.data.ActionCommandT5H;
import com.dkms.d5n.data.ControlCommandT5H;
import com.dkms.d5n.data.SendEluiData;
import com.dkms.d5n.data.StatisticsCountEntity;
import com.dkms.d5n.t5h.T5H;
import com.dkms.d5n.t5h.manager.AprcsvManager;
import com.dkms.d5n.t5h.manager.BeforeExposureDataManager;
import com.dkms.d5n.t5h.manager.GenDataManager;
import com.dkms.d5n.t5h.manager.TubeTableManager;
import com.dkms.d5n.t5h.manager.operationManager;
import com.dkms.d5n.util.LogUtil;
import com.dkms.d5n.util.T5HUtil;
import com.dkms.d5n.view.MainCenterView;
import com.dkms.d5n.view.MainTopView;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Description;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;

public class T5HSystem {

    private static final String TAG = "T5HSystem";

    private Context mContext;

    public static Serial422 mApp;
    public static StatusListener mStatusListener = null;
    public static DeviceListener mDeviceListener = null;

    public static boolean _isFocusChanging = false;    // Focus 바뀌는 과정인지 확인 Flag(Focus 바뀌고 최소 4초이상 기다리게 하는용도)

    public static Status _t5hStatus = Status.LoadingGen;
    public static String _beforet5hStatus = "";        // Before Status
    public static String _beforeNormalAndGenInfoStatus = "";    // Before Normal, GenInfo Status
    public static boolean _isFilamentHeating = false;    // Error, Warning시 Filament 대기시간 주기위해 만든 변수
    public static boolean _isCalibrationCheck = true;        // mA Calibration 안된부분 확인 변수 (mA Calibration에 Check Point 부분에 데이터 있으면 표기)
    public static boolean _isMainMode = true;        // Main 화면모드인지 체크하는 부분
    public static boolean _isArcingOccur = false;    // Arcing 발생 시 체크하는 부분
    public static boolean _isExposure = false;    // Exposure 버튼 클릭 시 체크하는 변수
    public static boolean _isHeatUnitWarning = false;    // HitUnit 80% 이상 시 체크하는 변수
    public static boolean _isAlertNotify = false;    // AlertNotify 체크용
    public static boolean _isHeatUnitLimit = false;    // HitUnit 90% 이상 시 체크하는 변수 ( Warning clear 시 Fliament heating 안나오게 )
    public static boolean _isRatioWarning = false;    // Ratio에 관련된 Warning 이 뜰 시 Fliament Delay 안나오게 하는 변수

    public static boolean _isSendingErrorWarningInformation = false;
    // APR Setting
    // APR값 변경하여 저장시 사용할 변수 (_saveApr_partno, _saveApr_no, _saveApr_name)
    public static int _saveApr_partno = 0;
    public static int _saveApr_no = 0;
    public static String _saveApr_name = "";

    public static boolean _isAprContMode = false;
    public static boolean _saveApr_Quick1_On = false;
    public static boolean _saveApr_Quick2_On = false;
    public static boolean _saveApr_On = false;
    public static boolean _isAprLongClick = false;    // APR LongClick, Touch Event 확인 및 처리용
    public static boolean _isAprContExposeDone = false;    // ExposeDone 체크(APR Cont Mode에서 사용)
    // APR 신규추가
    public static boolean _saveApr_New = false;    // APR Mode New Click

    // AEC Check
    public static boolean _isAecOn = false;    // AEC On/Off Check Flag
    public static int _aecLevel = 0;        // 0 : L, 1 : M, 2 : H
    public static boolean _aecFieldOn_L = true;        // AEC Field 1 Check Flag
    public static boolean _aecFieldOn_C = true;        // AEC Field 2 Check Flag
    public static boolean _aecFieldOn_R = true;        // AEC Field 3 Check Flag
    public static int _densityStep = 0;        // Density (-5 ~ 5)


    // Before Using AUX On Check
    public static boolean _isBeforeAuxOn = false;    // Main Mode AUX On/Off Check Flag

    // Before Using AEC On Check (AEC Calibration에서 Cancel 눌러서 나갈경우 _isAecOn 변수 true 인거 방지
    public static boolean _isBeforeAecOn = false;    // Main Mode AEC On/Off Check Flag

    /**
     * 시스템 리포트 관련
     **/
    public static int _lastErrorWarningNumber = 0;
    // 0 : normal , 1 : warning, 2 : Error
    public static int _enableErrorWarning = 0;

    int timerCount = 0;
    private TimerTask initTimerTask;
    private final Handler handler = new Handler();

    public static Serial422 setSerialPort;// = new Serial422();

    // KV,MA,MS,MAS Control Values
    public static double[] _maTbl = {10, 12.5, 16, 20, 25, 32, 40, 50, 64, 80, 100, 125, 160, 200, 250, 320, 400, 500, 640, 800, 1000};
    public static double[] _msTbl = {1, 1.25, 1.6, 2, 2.5, 3.2, 4, 5, 6.4, 8, 10, 12.5, 16, 20, 25, 32, 40, 50, 64, 80, 100, 125, 160, 200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200, 4000, 5000, 6400, 8000, 10000};
    public static double[] _masTbl = {0.1, 0.12, 0.16, 0.2, 0.25, 0.32, 0.4, 0.5, 0.64, 0.8, 1, 1.25, 1.6, 2, 2.5, 3.2, 4, 5, 6.4, 8, 10, 12.5, 16, 20, 25, 32, 40, 50, 64, 80, 100, 125, 160, 200, 250, 320, 400, 500, 640, 800, 1000};

    public static int[] _kW_table = {20, 32, 40, 52, 65, 80};

    // Default Values
    public static double _kv = 80;
    public static double _ma = 200;
    public static double _ms = 25;
    public static double _mas = 5;

    // Default DAC Values
    public static int _kvDAC = 1024;
    public static int _maDAC = 1030;

    // FeedBack Value (Calculate HU Values Use)
    public static double _kv_feedback = 0;
    public static double _ma_feedback = 0;
    public static double _ms_feedback = 0;
    public static double _mas_feedback = 0;
    public static int _kv_cal60_feedback = 0;
    public static int _kv_cal120_feedback = 0;
    // FeedBack Ratio Check (데이터 변수)
    public static int kV_Ratio_Limit_Count = 0;
    public static int ma_Ratio_Limit_Count = 0;
    public static int ms_Ratio_Limit_Count = 0;
    public static int mAs_Ratio_Limit_Count = 0;
    public static int kW_Ratio_Limit_Count = 0;

    // 초기화되여야 하는 변수
    public static int kV_Ratio_Limit = 0;
    public static int ma_Ratio_Limit = 0;
    public static int ms_Ratio_Limit = 0;
    public static int mAs_Ratio_Limit = 0;
    public static int kW_Ratio_Limit = 0;

    public static int Ratio_WarningNumber = 0;

    // HeartBeat Count Check
    public static int HeartBeat_Check = 0;
    // 어플리케이션 끄고 켰을때와 Device를 끄고 켰을때랑 Heart beat 들어오는 타이밍이 다름. 각 변수에 알맞게 적용
    public static boolean _isHeartBeatChecking = false;    // 하트비트 체킹이 진행중일떄.
    public static boolean _isoneTimeWarning = false;    // 하트비트 체킹 후 경고가 발생한 뒤 워닝 클리어를 눌렀을 시
    public static boolean _deviceturnonoff = false;    // 디바이스 전원 오프 온 일때

    // H,U Function Data
    public static long _beforetimesec = 0;    // 기존 System Sec값 가지고오기
    public static double _before_heat_energy_anode = 0;    // 기존가지고 있는 Heat Energy Tube Anode
    public static double _before_heat_energy_assembly = 0;    // 기존가지고 있는 Heat Energy Tube Assembly

    public static long _nowtimesec = 0;    // System Sec값 가지고오기
    public static double _now_heat_energy_anode = 0;    // 실시간 Heat Energy Tube Anode
    public static double _now_heat_energy_assembly = 0;    // 실시간 Heat Energy Tube Assembly
    public static double _now_heat_energy_anode_per = 0;    // 실시간 Heat Energy Tube Anode Percent(%)
    public static double _now_heat_energy_assembly_per = 0;    // 실시간 Heat Energy Tube Assembly Percent(%)

    public static double _heat_energy_expose = 0;    // 촬영 시 나간 Heat Energy
    public static String _heat_unit_rate = "";    // Heat Unit %로 나타냄(anode% assembly%)

    // Tube Data Values
    public static long _exposure_count = 0;    // 전체 조사 Count
    public static double _heat_energy_sum = 0;    // 전체 조사 H.U
    public static int _Arcing_count = 0;    // 전체 Arcing 발생 Count

    // Default AEC Reference DAC Values
    public static int _bucky1DAC = 1024;
    public static int _bucky2DAC = 1030;

    // Default Values(Only Calibration)
    // 공통사용
    public static int _focus_Cali = 0;    // 0 : Large, 1 : Small
    public static int _ms_Cali = 10;    // Calibration mS

    // kV Calibration
    public static double _kv_CalikV = 60;
    public static double _ma_CalikV = 200;
    public static int _kvDAC_CalikV = 1024;
    public static int _maDAC_CalikV = 1030;
    public static int _default_kvDAC_CalikV = 1024;

    // mA Calibration
    public static double _kv_CalimA = 40;
    public static double _ma_CalimA = 10;
    public static int _kvDAC_CalimA = 1024;
    public static int _maDAC_CalimA = 1030;
    public static int _default_maDAC_CalimA = 1030;

    // mA Calibration Auto/Manual 구분 Recali 구분
    public static boolean _isAutoCalimA = false;
    public static boolean _maAutoCaliStop = false;    // AutoCalibration 중간에 Stop 할경우 사용
    public static boolean _maAutoRecal = false;    // Re AutoCalibration 할경우 사용
    public static boolean _maAutoCaliCurrent = false;    // mA Auto Calibration 시작일때 true 어떤 이유든 끝나면 false
    public static boolean _maAutoRecalPause = false;
    public static boolean _maAutoRecalStop = false;

    // AEC Calibration
    public static double _kv_CaliAEC = 60;
    public static double _ma_CaliAEC = 200;
    public static int _kvDAC_CaliAEC = 1024;
    public static int _maDAC_CaliAEC = 1030;
    public static int _bucky1DAC_CaliAEC = 1024;
    public static int _bucky2DAC_CaliAEC = 1030;

    public static int _buckyselect_CaliAEC = 0;        // 0 : Non, 1 : Bucky1, 2: Bucky2
    public static int _aecLevel_CaliAEC = 1;        // 0 : L, 1 : M, 2 : H
    public static boolean _aecFieldOn_L_CaliAEC = true;        // AEC Field 1 Check Flag
    public static boolean _aecFieldOn_C_CaliAEC = true;        // AEC Field 2 Check Flag
    public static boolean _aecFieldOn_R_CaliAEC = true;        // AEC Field 3 Check Flag
    public static int _densityStep_CaliAEC = 0;        // Density (-5 ~ 5)

    // Send to Display
    public static int _patientsize = 0;        // 0 : C, 1 : S, 2 : M, 3 : L
    public static int _buckyselect = 0;        // 0 : Non, 1 : Bucky1, 2: Bucky2
    public static int _focus = 1;        // 0 : Large, 1 : Small
    public static int _aux = 0;        // 0 : OFF, 1 : ON

    // Mode Control
    public static boolean _login = false;    // 일반 설정모드(Normal) - (서비스 모드)
    public static boolean _login_user = false; // 사용자 모드
    public static boolean _login_master = false;    // Master 모드(Factory Mode)

    // Heart Beat Count Check
    public static int _heartcount = 0;
    public static boolean _ready_sw_on = false;
    public static boolean _communication = false;

    // DAP
    public static double _dap = 0.0;
    // AutoExpose Values Point 1
    public static double _kv_AutoExpose = 100;
    public static double _ma_AutoExpose = 100;
    public static double _ms_AutoExpose = 400;
    public static double _mas_AutoExpose = 40;
    public static int _focus_AutoExpose = 1;    // 0 : Large, 1 : Small

    // AutoExpose DAC Values Point 1
    public static int _kvDAC_AutoExpose = 1024;
    public static int _maDAC_AutoExpose = 1030;

    // AutoKv Mode
    public static double _kv_target_AutoKv = 150;        // Target kV
    public static double _kv_AutoKv = 150;        // kV
    public static int _kvDAC_AutoKv = 2000;        // kV DAC Value
    public static int _stepTime_mS = 2000;        // 몇초간격으로 증가할지 (Defalut: 2Sec)
    public static boolean _set_AutoKv = false;    // Set Button Click
    public static boolean _start_AutoKv = false;    // Start Button Click
    public static String _kv_feedback_AutoKv = "";        // FeedBack ALL Value
    public static int _waitTime_sec_AutoKv = 10;        // wait timer count Sec

    //ScopeMode Value 2023-08-24 ms
    public static double _kv_Scope = 80;
    public static double _ma_Scope = 100;
    public static double _ms_Scope = 100;
    public static double _mas_Scope = 10;
    public static int _focus_Scope = 1;    // 0: Large, 1 : Small

    public static int _kvDAC_Scope = 1024;
    public static int _maDAC_Scope = 1030;

    // BootLoader
    public static int _bootloadr_file_loc = 0;
    public static int _bootloadr_file_size = 0;

    // Init Check
    public static boolean _initfinish = false;
    public static boolean _initChecking = false;

    // Ready Key Pad
    public static boolean _ready_keypad = false;

    // SW Version
    public static String _swVersion = "";

    private TimerTask statusTimerTask;
    private Timer statusTimer;

    // before apr
    public static int _beforeApr_part = 1;
    public static int _beforeApr_no = -1;
    public static boolean _beforeAPRUSE = false;

    // Theme Type
    public static String _themeLight = "Light";
    public static String _themeDark = "Dark";

    // Error & Warning Information
    public static LinkedHashMap<String, LinkedHashMap<String, String>> InfoHash = new LinkedHashMap<>();
    public static int InfoCount = 1;

    // 다른 화면에서 Focus 변경 시 체크
    public static boolean _isDifferentScreenFocus = false;

    public static boolean _isMasDisplay = false;

    // Apr Percent Mode
    public static boolean _isAPRPercent = false;
    public static double _BeforeAPRmA = 0;
    public static double _BeforeAPRmAs = 0;

    public static Serial422 getSerial() {
        return setSerialPort;
    }

    public enum Status    // Status
    {
        LoadingGen, Normal, SystemSetup, Error, Warning, CalibrationMain, kVCalibration,
        mACalibration, AECCalibration, AutoExpose, kVExpose, GenInfo, ScopeMode, Caution,
        msTuning, SYSTEM_REPORT, mAFeedbackCalibration;
    }

    public T5HSystem(Context context) {
        this.mContext = context;
    }

    public static boolean isApplicationSentToBackground(final Context context) {
        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningTaskInfo> tasks = am.getRunningTasks(1);
        if (!tasks.isEmpty()) {
            ComponentName topActivity = tasks.get(0).topActivity;
            if (!topActivity.getPackageName().equals(context.getPackageName())) {
                return true;
            }
        }
        return false;
    }

    // 앱 이 백그라운드 실행인지 체크
    public static boolean BackgroundCheck(final Context context) {
        //LogUtil.i("T5HSystem::BackgroundCheck : "+ isApplicationSentToBackground(context));
        return isApplicationSentToBackground(context);
    }

    // Initial Timer
    public void InitTimerStart() {
        initTimerTask = new TimerTask() {
            @Override
            public void run() {
                if (!opMgr.loaded || !opMgr.settedFilamentStandbyCurrentAdjAmpere) return;

                if (!opMgr.isSelectedTube()) {
                    LogUtil.i(TAG, "setSelectTube : true : " + SysData.TubeType.toString());
                    opMgr.setSelectTube(SysData.TubeType.toString());
                    opMgr.setHertz(SysData.Frequency.toInteger());
                    opMgr.mA_calValidLoad();
                    opMgr.validateXML();
                    //opMgr.testPublic();
                    //operationManager.markStatus(Arrays.toString(opMgr.getStep_kV_maxGap10())); //test
                }

                Update();
                timerCount++;
                if (timerCount == 8)    // 9 to 8
                {
                    _initChecking = false;
                    initTimerTask.cancel();
                }
            }
        };
        Timer timer = new Timer();
        timer.schedule(initTimerTask, 500, 1000);
    }


    final Handler updateHandler = new Handler(msg -> {
        // 원래 하려던 동작 (UI 변경 작업 등)
        if (_ma > SysData.FocusAutoChangeValue.toDouble()) {
            mainFocusControl.focusControlSet(0);
//            _focus = 0;
//            updateFocusButton(_focus);
        } else {
            mainFocusControl.focusControlSet(1);
//            _focus = 1;
//            updateFocusButton(_focus);
        }
        return false;
    });

    private void updateFocusButton(int focus) {
        if (focus == 0) {
            MainCenterView.focus_select_small.setSelected(false);
            MainCenterView.focus_select_large.setSelected(true);
        } else if (focus == 1) {
            MainCenterView.focus_select_large.setSelected(false);
            MainCenterView.focus_select_small.setSelected(true);
        }
    }

    private void Update() {
        String t1 = String.format(Locale.getDefault(), "%d%%", timerCount * 10);
        switch (timerCount) {
            case 0:
                T5HSystem.OnDeviceInit();
                T5H.getInstance().sendMainFeedBackDisplayChanged("!! Initalize 0 %");
                break;

            case 1:
                InitTimeMin();
                InitTimeMax();
                InitRotorStartingCurrentMin();
                InitRotorStartingCurrentMax();
                InitRotorStartingTime();
                InitRotorRunningCurrentMin();
                InitRotorRunningCurrentMax();
                InitRotorRunningTime();
                LogUtil.i("=== T5HSystem::Init 1 === ");
                T5H.getInstance().sendMainFeedBackDisplayChanged("!! Initalize 25 %");
                break;
            case 2:
                InitBuckyDelayTime();
                InitBucky1Type();
                InitBucky1GridType();
                InitBucky2Type();
                InitBucky2GridType();
                InitBK1FB();
                InitBK2FB();
                LogUtil.i("=== T5HSystem::Init 2 === ");
                T5H.getInstance().sendMainFeedBackDisplayChanged("!! Initalize 50 %");
                break;
            case 3:
                InitTDrResposeTime();
                InitIniterLock();
                InitDoorLock();
                InitExternallock();
                InitFilamentMin();
                InitFilamentMax();
                OverMaRef(SysData.OvermA.toInteger(), SysData.OvermADAC.toInteger());        // 1. Send OvermA Ref (Caldata 불러와서 할것)
                OverKvRef(SysData.OverkV.toInteger(), SysData.OverkVDAC.toInteger());        // 2. Send OverkV Ref (Caldata 불러와서 할것)
                LogUtil.i("=== T5HSystem::Init 3 === ");
                T5H.getInstance().sendMainFeedBackDisplayChanged("!! Initalize 75 %");
                break;
            case 4:
                InitAECBackupTime();
                InitFootSwitchDelayTime();
                InitFocusSmallCurrentStandBy();
                InitFocusLargeCurrentStandBy();
                InitFilamentBoostTime();
                InitRotorPhaseOffsetValue();
                Init60kVCalValue();
                Init120kVCalValue();
                InitmaCalValue();
                InitmASingleFaultRatio();
                InitmAAllowValue();
                InitAECErrorTime();

                // Tube Focus Setting code here
                InitFocusChangeTime();
                InitFocusPrepareTime();
                InitFilamentPrepareTime();

                T5H.getInstance().sendMainFeedBackDisplayChanged("!! Initalize 100 %");
                //Before or User Defined
                if (SysData.StartCondition.toString().equals("BeforeExposure")) {
                    BeforeExposureDataManager.setDataBeforeExposure1();
                    if (!checkExposureControl((int) _kv, _ma, _ms, _mas, _focus)) {
                        _kv = 80;
                        _ma = 100;
                        _ms = 100;
                        _mas = 10;
                    }
                } else if (SysData.StartCondition.toString().equals("UserDefined")) {
                    _kv = SysData.UserKv.toDouble();
                    _ma = SysData.UserMa.toDouble();
                    _ms = SysData.UserMS.toDouble();
                }
                LogUtil.i("=== T5HSystem::Init 4 === ");
                break;
            case 5:
                if (_kv > SysData.MaxKv.toDouble())
                    _kv = SysData.MaxKv.toDouble();
                if (SysData.FilamentType.toString().equalsIgnoreCase("Small")) {
                    // 24.04.01 Small이지만 FocusAutoChangeValue 넘는 경우는 넣어주고, 넘지 않으면 Limit만 체크
                    if (_ma > SysData.FocusAutoChangeValue.toDouble())
                        _ma = SysData.FocusAutoChangeValue.toDouble();
                    if (_ma > SysData.MaxCurrent.toDouble())
                        _ma = SysData.MaxCurrent.toDouble();
                } else if (SysData.FilamentType.toString().equalsIgnoreCase("All")) {
                    // Small 구간일때 Large는 사용가능하게해야되서 변경 230814
                    if (_login_master) {
                        if (SysData.FocusAutoChange.toBoolean()) {
                            if (_ma > SysData.MaxCurrent.toDouble()) {
                                _ma = SysData.MaxCurrent.toDouble();
                            }
                            if (_ma < SysData.MinCurrent.toDouble()) {
                                _ma = SysData.MinCurrent.toDouble();
                            }
                            Message msg = updateHandler.obtainMessage();
                            updateHandler.sendMessage(msg);

                        }
                    } else {
                        if (_ma > SysData.MaxCurrent.toDouble()) {
                            _ma = SysData.MaxCurrent.toDouble();
                        }
                        if (_ma < SysData.MinCurrent.toDouble()) {
                            _ma = SysData.MinCurrent.toDouble();
                        }
                        Message msg = updateHandler.obtainMessage();
                        updateHandler.sendMessage(msg);
                    }
                }
                LogUtil.i("=== T5HSystem::Init 5 === ");
                break;
            case 6:
                LogUtil.i("=== T5HSystem::Init 6 === ");
                break;
            case 7:
                // Case 5에서 변동된 mA 에대한 mAs, ms값 변경
                ComputeMasInit();

                LogUtil.i("=== T5HSystem::Init 7 End === ");
                StatusTimerStart();
                T5HSystem.setT5HStatus(T5HSystem.Status.Normal, "MainActivity::Initial Finish set Status None");

                new Handler(Looper.getMainLooper()).postDelayed(() -> {
                    if (!_initfinish) {
                        operationManager.markStatus("timeout initFinish.. send occurGetInfo");
                        setSerialPort.SerialSend(0, ControlCommandT5H.COMM_GET_INFO
                                , ActionCommandT5H.ERROR_CODE, null);

                        setSerialPort.SerialSend(0, ControlCommandT5H.COMM_GET_INFO
                                , ActionCommandT5H.WARNING_CODE, null);
                    }
                }, 1500);

                break;

        }
        LogUtil.i("T5HSystem::Init Sys count : " + timerCount);
    }

    public void setStatusListener(StatusListener statusListener) {
        mStatusListener = statusListener;
    }

    public interface StatusListener {
        //public void OnStatusChanged(StatusType Status);
    }

    public void setDeviceListener(DeviceListener devieceListener) {
        mDeviceListener = devieceListener;
    }

    public interface DeviceListener {
        public void OnDeviceChanged(int CmdType, int CmdData, String strMsg);
    }

    public static void setT5HStatus(Status status, String callFunction) {
        if (status == _t5hStatus)
            return;
        _beforet5hStatus = _t5hStatus.toString();
        _t5hStatus = status;

        // 24.03.20 Count 관리 추가
        // Warning, Error Count
        if (_t5hStatus == Status.Warning) {
            _isExposure = false;
            StatisticsCountEntity.todayCount(StatisticsCountEntity.StatisticsType.WARNING_COUNT, 0.0);
        } else if (_t5hStatus == Status.Error) {
            _isExposure = false;
            StatisticsCountEntity.todayCount(StatisticsCountEntity.StatisticsType.ERROR_COUNT, 0.0);
        }

        // Send Elui Status Check
        synchronized (T5HSystem.class) {
            EluiSystem.eluiUiDisabledControl();
        }
        LogUtil.i(String.format("T5HSystem::setT5HStatus. Status is %s, CallFunction is %s", status.toString(), callFunction));
    }

    public void StatusTimerStart() {
        statusTimerTask = new TimerTask() {
            @Override
            public void run() {
                LogUtil.i("T5HSystem::StatusTimerStart : now Display Mode : " + _t5hStatus);
                switch (_t5hStatus) {
                    // 메인 화면
                    case Normal:
                    case LoadingGen:
                        if (!_ready_sw_on) {
                            if (_heartcount > 1) {
                                _heartcount = 0;
                                T5H.getInstance().sendDeviceConnectChecked(1);    // Device Connect Check Display 로 연결
                                LogUtil.i("T5HSystem::StatusTimerStart Connect Status: " + _t5hStatus + " HU: " + _heat_unit_rate);
                            } else {
                                T5H.getInstance().sendDeviceConnectChecked(0);    // Device Connect Check Display 로 연결
                                LogUtil.i("T5HSystem::StatusTimerStart DisConnect Status: " + _t5hStatus);
                            }
                        }
                        break;
                    case Error:
                    case Warning:
                        break;
                    default:
                        if (!_ready_sw_on) {
                            if (_heartcount > 1) {
                                _heartcount = 0;
                                T5H.getInstance().sendDeviceConnectedChangedStatusBar(1);
//                                T5H.getInstance().sendDeviceConnectedValueChangedAuto(1);    // Device Connect Check Display 로 연결
                                LogUtil.i("T5HSystem::StatusTimerStart Connect Status: " + _t5hStatus + " HU: " + _heat_unit_rate);
                            } else {
                                T5H.getInstance().sendDeviceConnectedChangedStatusBar(0);    // Device Connect Check Display 로 연결
                                LogUtil.i("T5HSystem::StatusTimerStart DisConnect Status: " + _t5hStatus);
                            }
                        }
                        break;
                }

            }
        };
        statusTimer = new Timer();
        statusTimer.schedule(statusTimerTask, 1000, 5000); //1000, 30000 // 6000, 5000
    }

    // Relativelayout Blink Mode
    @Nullable
    public static void MainBackGroundBlinkMode(boolean check, RelativeLayout relative, LinearLayout linear, AnimationDrawable animationDrawable) {
        try {
            if (_t5hStatus == Status.Normal) {
                relative.setBackgroundResource(R.drawable.bg_color_main_list);
                animationDrawable = (AnimationDrawable) relative.getBackground();
                if (check) {
                    animationDrawable.run();
                    LogUtil.i("T5HSystem ::: BlinkMode Start");
                } else {
                    animationDrawable.stop();
                    LogUtil.i("T5HSystem ::: BlinkMode Stop");
                }
            } else if (_t5hStatus == Status.ScopeMode || _t5hStatus == Status.AutoExpose || _t5hStatus == Status.CalibrationMain
                    || _t5hStatus == Status.kVCalibration || _t5hStatus == Status.mACalibration || _t5hStatus == Status.AECCalibration
                    || _t5hStatus == Status.Warning || _t5hStatus == Status.Error || _t5hStatus == Status.msTuning || _t5hStatus == Status.mAFeedbackCalibration) {
                linear.setBackgroundResource(R.drawable.bg_color_main_list);
                animationDrawable = (AnimationDrawable) linear.getBackground();
                if (check) {
                    animationDrawable.run();
                    LogUtil.i("T5HSystem ::: BlinkMode Start");
                } else {
                    animationDrawable.stop();
                    LogUtil.i("T5HSystem ::: BlinkMode Stop");
                }
            }
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }

    public static String CalArcingCount() {
        _Arcing_count++;
        StatisticsCountEntity.todayCount(StatisticsCountEntity.StatisticsType.ARCING_COUNT, 0.0);
        String totArcingCount = "Total Arcing Count : " + String.valueOf(_Arcing_count);
        LogUtil.i("Arcing Count : " + _Arcing_count);
        GenDataManager.saveGeneratorData();

        return totArcingCount;
    }

    // Calculate H.U
    public static void CalHU(int ready) {
        switch (ready) {
            // 수석님 요청
            // :: Assembly : _before_heat_energy_assembly + ((Rotor Start Time + 0.35) * 688)
            // :: Anode    :
            // 1 일때 Ready
            // 2 일때 Exposure 후 Time FeedBack 받을 떄
            case 1:
                _beforetimesec = _nowtimesec;
                _now_heat_energy_anode = _before_heat_energy_anode + (((SysData.RotorStartingTimeLow.toDouble() / 1000) + 0.35) * 688);
                _now_heat_energy_assembly = _before_heat_energy_assembly + (((SysData.RotorStartingTimeLow.toDouble() / 1000) + 0.35) * 688);

                _before_heat_energy_anode = _now_heat_energy_anode;
                _before_heat_energy_assembly = _now_heat_energy_assembly;

                _heat_energy_sum = _heat_energy_sum + (((SysData.RotorStartingTimeLow.toDouble() / 1000) + 0.35) * 688);

                //StatisticsCountEntity.todayCount(StatisticsCountEntity.StatisticsType.EXPOSURE_COUNT, 688);

                String totHU1 = "Total HU: " + opMgr.getHeatUnitToSring(T5HSystem._heat_energy_sum);
                T5H.getInstance().sendTotalHeatUnitValueChanged(totHU1);            // Total HU Value Display 로 연결
                T5H.getInstance().sendTotalHeatUnitValueChangedAuto(totHU1);        // Total HU Value Display 로 연결 Auto Expose Mode
                T5H.getInstance().sendTotalHeatUnitValueChangedGenInfo(totHU1);    // Total HU Value Display 로 연결 Generator Information
                T5H.getInstance().sendMaCaliTotalHeatUnitValueChanged(totHU1);    // Total HU Value Display 로 연결 mA Calibration Mode
                LogUtil.i("T5HSystem::CalHU Total Values 1.ExposeCount: " + _exposure_count + " 2.HeatUnit: " + _heat_energy_sum);
                //Save Data
                GenDataManager.saveGeneratorData();
                break;
            // FeedBack 받았을 떄
            case 2:
                _beforetimesec = _nowtimesec;
                double mas = _ma_feedback * _ms_feedback / 1000;
                // Heat Energy = kV * mAs; // Heat Energy
                // ex) 100kV, 100mAs 로 조사했을 경우 Heat Energy 10000J
                _heat_energy_expose = _kv_feedback * mas;

                // _heat_energy_expose = 5000.0; // Test Value
                // (_ms * 688)
                _now_heat_energy_anode = _before_heat_energy_anode + _heat_energy_expose + ((_ms / 1000) * 688);
                _now_heat_energy_assembly = _before_heat_energy_assembly + _heat_energy_expose + ((_ms / 1000) * 688);

                _before_heat_energy_anode = _now_heat_energy_anode;
                _before_heat_energy_assembly = _now_heat_energy_assembly;

                // Total Exposure count
                _exposure_count++;
                // 총 조사 Energy (Heat Unit)
                _heat_energy_sum = _heat_energy_sum + _heat_energy_expose;
                // Count 관리
                StatisticsCountEntity.todayCount(StatisticsCountEntity.StatisticsType.EXPOSURE_COUNT, _heat_energy_expose);

                if (true) { //@003 ▼
                    CalHU_update();
                } else { //@003 ▲

                } //@003

                LogUtil.i("T5HSystem::CalHU Total Values 1.ExposeCount: " + _exposure_count + " 2.HeatUnit: " + _heat_energy_sum);
                // Save Data
                GenDataManager.saveGeneratorData();
                break;
        }
    }

    public static void CalHU_update() { //@003 ▼
        String totCount = "Exposure Count Total: " + _exposure_count;
        String totHU = "HU Total: " + opMgr.getHeatUnitToSring(_heat_energy_sum);

        T5H.getInstance().sendTotalCountValueChanged(totCount);            // Total Count Value Display 로 연결
        T5H.getInstance().sendTotalHeatUnitValueChanged(totHU);            // Total HU Value Display 로 연결

        T5H.getInstance().sendTotalCountValueChangedAuto(totCount);        // Total Count Value Display 로 연결 Auto Expose Mode
        T5H.getInstance().sendTotalHeatUnitValueChangedAuto(totHU);        // Total HU Value Display 로 연결 Auto Expose Mode

        T5H.getInstance().sendTotalCountValueChangedGenInfo(totCount);    // Total Count Value Display 로 연결 Generator Information
        T5H.getInstance().sendTotalHeatUnitValueChangedGenInfo(totHU);    // Total HU Value Display 로 연결 Generator Information

        T5H.getInstance().sendMaCaliTotalCountValueChanged(totCount);    // Total Count Value Display 로 연결 mA Calibration Mode
        T5H.getInstance().sendMaCaliTotalHeatUnitValueChanged(totHU);    // Total HU Value Display 로 연결 mA Calibration Mode

        LogUtil.i("T5HSystem::CalHU Total Values 1.ExposeCount: " + _exposure_count + " 2.HeatUnit: " + _heat_energy_sum);
        // Save Data
        GenDataManager.saveGeneratorData();
    }//@003


    public static void CalHUTimeSecDisplay() {
        _nowtimesec = System.currentTimeMillis() / 1000;
        long secgap = _nowtimesec - _beforetimesec;
        double secgapdb = (double) secgap;
        double anodeexp = SysData.HUAnodeExp.toDouble();
        double assemblyexp = SysData.HUAssemblyExp.toDouble();

        _now_heat_energy_anode = _before_heat_energy_anode * Math.pow(anodeexp, secgapdb);
        _now_heat_energy_assembly = _before_heat_energy_assembly * Math.pow(assemblyexp, secgapdb);

        double anodeHeatContent = SysData.HUAnodeHeatContent.toDouble() * 1000;        // (J to kJ)
        double assemblyHeatContent = SysData.HUAssemblyHeatContent.toDouble() * 1000;    // (J to kJ)
        _now_heat_energy_anode_per = Math.round(_now_heat_energy_anode / anodeHeatContent * 100);            // anode HU % Value
        _now_heat_energy_assembly_per = Math.round(_now_heat_energy_assembly / assemblyHeatContent * 100);    // assembly HU % Value
        String hu_anodeString = String.valueOf((int) _now_heat_energy_anode_per);
        String hu_assemblyString = String.valueOf((int) _now_heat_energy_assembly_per);
        LogUtil.i("T5HSystem::CalHUTimeSecDisplay -0 _nowtimesec: " + _nowtimesec + " secgap: " + secgap + " anode: " + _now_heat_energy_anode + " Assembly : " + _now_heat_energy_assembly);

        _heat_unit_rate = hu_anodeString + "% " + hu_assemblyString + "%";

        T5H.getInstance().sendHeatUnitValueChanged(_heat_unit_rate);            // HU Value Display 로 연결
        T5H.getInstance().sendHeatUnitValueChangedAuto(_heat_unit_rate);        // HU Value Display 로 연결 Auto Expose
        T5H.getInstance().sendHeatUnitValueChangedGenInfo(_heat_unit_rate);    // HU Value Display 로 연결 Generator Information
        T5H.getInstance().sendMaCaliHeatUnitValueChanged(_heat_unit_rate);   // HU Value Display 로 연결 mA Calibration
        T5H.getInstance().sendHeatUnitValueChangedScope(_heat_unit_rate);    // HU Value Display Scope Mode
        T5H.getInstance().sendHeatUnitValueChangedAutoKv(_heat_unit_rate);  // HU Value Display AutoKV 연결
        T5H.getInstance().sendHeatUnitValueChangedStatusBar(_heat_unit_rate);


        _heartcount++;
        LogUtil.i("T5HSystem::CalHUTimeSecDisplay -1 HU: " + _heat_unit_rate + " System Status: " + _t5hStatus + " HearCount: " + _heartcount + " Status : " + _t5hStatus);

        if (_heartcount > 200)
            _heartcount = 1;

        _beforetimesec = _nowtimesec;
        _before_heat_energy_anode = _now_heat_energy_anode;
        _before_heat_energy_assembly = _now_heat_energy_assembly;
    }


    // focusValueReceiveSetScope 에서만 사용 Focus는 이걸로 직접불러오지 말것 !!
    public static void FocusControlScope(int focus) {
        // 해당 Focus에 kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus_Scope, _kv_Scope);

        // mA Filtering
        // 자동으로 ms가 0이되는 ma값
        if (_ma_Scope >= tablevalue_mszero_ma) {
            //LogUtil.i("test t  zero ma test1 : " + test1  + " test2 : " + test2);
            _ma_Scope = FindNearestNotEqualLessValue(_maTbl, tablevalue_mszero_ma);
            maDisplayFilterSendAuto();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);
            if (_ms_Scope > tablevalue_ms) {
                //LogUtil.i("test t FindNearstMs ms is over");
                _ms_Scope = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSendAuto();
            }
            ComputeMasScope();    // mAs Value 변경
        }

        operationManager.range msRange = opMgr.getRange_ms(opMgr.castFocusFrom(focus), (int) _kv_Scope, (float) _ma_Scope);
        if (msRange == null) {
            LogUtil.i("T5HSystem::FocusControlScope : ms Scope Range Max : null");
        } else {
            LogUtil.i("T5HSystem::FocusControlScope : ms Scope Range Max : " + msRange.max);
        }
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);
        LogUtil.i("T5HSystem::FocusControlScope FindNearstMs mS is : " + tablevalue_ms + " now mS : " + _ms_Scope);
        if (_ms_Scope > tablevalue_ms) {
            _ms_Scope = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSendScope();
            _mas_Scope = _ma_Scope * _ms_Scope / 1000;
            _mas_Scope = FindNearestValue(_masTbl, _mas_Scope);
            LogUtil.i("T5HSystem::FocusControlScope FindNearstMs mS is over Send mS : " + _ms_Scope);
        }
    }

    // focusValueReceiveSetAuto 에서만 사용 Focus는 이걸로 직접불러오지 말것 !!
    public static void FocusControlAuto(int focus) {
        // 해당 Focus에 kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus_AutoExpose, _kv_AutoExpose);

        // mA Filtering
        // 자동으로 ms가 0이되는 ma값
        if (_ma_AutoExpose >= tablevalue_mszero_ma) {
            //LogUtil.i("test t  zero ma test1 : " + test1  + " test2 : " + test2);
            _ma_AutoExpose = FindNearestNotEqualLessValue(_maTbl, tablevalue_mszero_ma);
            maDisplayFilterSendAuto();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus_AutoExpose, _kv_AutoExpose, _ma_AutoExpose);
            if (_ms_AutoExpose > tablevalue_ms) {
                //LogUtil.i("test t FindNearstMs ms is over");
                _ms_AutoExpose = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSendAuto();
            }
            ComputeMasAuto();    // mAs Value 변경
        }

        operationManager.range msRange = opMgr.getRange_ms(opMgr.castFocusFrom(focus), (int) _kv_AutoExpose, (float) _ma_AutoExpose);
        if (_ms_AutoExpose > msRange.max) {
            _ms_AutoExpose = FindNearestLessValue(_msTbl, msRange.max);
            msDisplayFilterSendAuto();
            _mas_AutoExpose = _ma_AutoExpose * _ms_AutoExpose / 1000;
            _mas_AutoExpose = FindNearestValue(_masTbl, _mas_AutoExpose);
            LogUtil.i("T5HSystem::FocusControlAuto FindNearstMs mS is over Send mS : " +
                    _ms_AutoExpose + " Limit ms : " + msRange.max + " Change mAs : " + _mas_AutoExpose);
        }
    }

    // PC or APR로부터 받은 kV Value Set&Display (tube별 Filtering 없음, 단순 Set&Display)
    public static void kvValueReceiveSet(double kv) {
        _kv = kv;
        _kvDAC = FindFinalKvDACValueTable(_kv);
        // Seekbar Control display
        seekbarKv.setProgress((int) _kv - SysData.MinKv.toInteger());
        seekbarKv.onSizeChanged(seekbarKv.getWidth(), seekbarKv.getHeight(), 0, 0);

        kvDisplayFilterSend();
    }

    // PC or APR로부터 받은 mA Value Set&Display (tube별 Filtering 없음, 단순 Set&Display)
    public static void maValueReceiveSet(double ma) {
        _ma = ma;
        // Filament Option Filtering(Small 일경우)
        maControlFilamentSmall(ma);
        _maDAC = FindFinalMaDACValueTable(_focus, _ma, (int) _kv);
        maDisplayFilterSend();
    }

    // PC or APR로부터 받은 mS Value Set&Display (tube별 Filtering 없음, 단순 Set&Display)
    public static void msValueReceiveSet(double ms) {
        _ms = ms;
        msDisplayFilterSend();
        ComputeMas();    // mAs Value 변경
    }


    // focus Value Set&Display (tube별 Filtering 가능)
    // 기존 focus랑 비교해서 다를 시만 Generator로 보냄
    public static void focusValueReceiveSetAuto(int focus) {
        LogUtil.i("FOCUS TEST::Receive 0  : " + focus);

        if (focus != _focus_AutoExpose) {
            _focus_AutoExpose = focus;
            String focusstring = Integer.toString(_focus_AutoExpose);
            if (focus == 0) {
                LogUtil.i("FOCUS TEST::Receive 0-0 : " + focus);

                T5H.getInstance().sendFocusDisplayChangedAuto(focusstring);    // Focus Value Display로 연결
                LogUtil.i("T5HSystem::ChangeFocusAuto Large");
            } else {
                LogUtil.i("FOCUS TEST::Receive 0-1 : " + focus);

                T5H.getInstance().sendFocusDisplayChangedAuto(focusstring);    // Focus Value Display로 연결
                LogUtil.i("T5HSystem::ChangeFocusAuto Small");
            }
            LogUtil.i("FOCUS TEST::Receive 1 : " + focusstring);

            FocusControlAuto(_focus_AutoExpose);
            FocusSelect(_focus_AutoExpose);
        } else {
            LogUtil.i("FOCUS TEST::T5HSystem::ChangeFocusAuto Before Focus: " + _focus_AutoExpose + " Setfocus: " + focus + " is Same");
        }
    }

    public static void focusValueReceiveSetScope(int focus) {
        LogUtil.i("FOCUS TEST::Receive 0  : " + focus);

        if (focus != _focus_Scope) {
            _focus_Scope = focus;
            String focusstring = String.valueOf(_focus_Scope);
            if (focus == 0) {
                LogUtil.i("FOCUS TEST::Receive 0-0 : " + focus);

                T5H.getInstance().sendFocusDisplayChangedScope(focusstring);    // Focus Value Display로 연결
                LogUtil.i("T5HSystem::ChangeFocusScope Large");
            } else {
                LogUtil.i("FOCUS TEST::Receive 0-1 : " + focus);

                T5H.getInstance().sendFocusDisplayChangedScope(focusstring);    // Focus Value Display로 연결
                LogUtil.i("T5HSystem::ChangeFocusScope Small");
            }
            LogUtil.i("FOCUS TEST::Receive 1 : " + focusstring);

            FocusControlScope(_focus_Scope);
            FocusSelect(_focus_Scope);
        } else {
            LogUtil.i("FOCUS TEST::T5HSystem::ChangeFocusAuto Before Focus: " + _focus_Scope + " Setfocus: " + focus + " is Same");
        }
        // Elui 로 전송
        //EluiSystem.eluiEqualsFocusData();
    }

    // kV,mA,mS,Focus 한번에 들어올 경우 Check Set (APR, Viewer)
    public static void AllValueReceiveSet(double kv, double ma, double ms, int focus, int bucky, int aux, int psize) {
        // 1. kV Limit Value Check
        if (kv > SysData.MaxKv.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 1 kV: " + kv + " Max kV: " + SysData.MaxKv.toDouble());
            kv = SysData.MaxKv.toDouble();
            //return;
            // Error Message Send & Return (Max kV Over)
        }
        if (kv < SysData.MinKv.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 1 kV: " + kv + " Min kV: " + SysData.MinKv.toDouble());
            kv = SysData.MinKv.toDouble();
            //return;
            // Error Message Send & Return (Min kV Less)
        }

        // 1-1. kV Value Setting & Display
        _kv = kv;                // kV Value Set
        // Seekbar Control display
        seekbarKv.setProgress((int) _kv - SysData.MinKv.toInteger());
        seekbarKv.onSizeChanged(seekbarKv.getWidth(), seekbarKv.getHeight(), 0, 0);
        kvDisplayFilterSend();    // kV Display

        // 2. Focus Value Check
        if (SysData.FilamentType.toString().equalsIgnoreCase("Small")) {
            focus = 1;
        } else if (SysData.FilamentType.toString().equalsIgnoreCase("Large")) {
            focus = 0;
        } else {
            focus = focus;
        }
        // TODO: 2024-12-17 : 나중에 조사조건 공통화 할때 변경해줘야댐 .!!
        if (mainFocusControl != null)
            mainFocusControl.focusControlSet(focus);
//        focusValueReceiveSet(focus);
        LogUtil.i("T5HSystem::AllValueReceiveSet Case 2 Input Focus: " + focus + " Final Focus: " + _focus);

        // 3. mA Value Check
        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
        double fo = focus;
        tablevalue_mszero_ma = FindMsZeroMaValueFinal(fo, kv);
        if (ma >= tablevalue_mszero_ma) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 3 mA: " + ma + " >= tablezero mA: " + tablevalue_mszero_ma);
            ma = tablevalue_mszero_ma;
            //return;
            // Error Message Send & Return (mA Value is Over Tube Table)
        }
        if (ma >= SysData.MaxCurrent.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 3 mA: " + ma + " Limit Max mA: " + SysData.MaxCurrent.toDouble());
            ma = SysData.MaxCurrent.toDouble();
            //return;
        }
        if (ma <= SysData.MinCurrent.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 3 mA: " + ma + " Limit Min mA: " + SysData.MinCurrent.toDouble());
            ma = SysData.MinCurrent.toDouble();
            //return;
        }
        // 3-1. mA Value Setting & Display
        maValueReceiveSet(ma);    // mA Value Set & Display

        // 4. Check Max kW
        double nowkwValue = 0;
        nowkwValue = kv * ma / 1000;
        if (nowkwValue > SysData.MaxPower.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 4 MaxPower: " + SysData.MaxPower.toDouble() + " NowValue: " + nowkwValue + " Return");
            return;
            // Error Message Send & Return (Max kW Over)
        }

        // 5. mS Value Check
        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(fo, kv, ma);
        double limit_mS = SysData.MaxExposureTime.toDouble();

        if (ms > tablevalue_ms) {
            ms = tablevalue_ms;
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 5 mS: " + ms + " > table mS: " + tablevalue_ms);
            //return;
            // Error Message Send & Return (mS Value is Over Tube Table)
        }
        if (ms > limit_mS) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 5 mS: " + ms + " > Limit mS: " + limit_mS);
            ms = limit_mS;
            //return;
            // Error Message Send & Return (mS Value is Over Tube Table)
        }

        // 5-1 mS & mAs Value Set DisPlay
        msValueReceiveSet(ms);    // mS Value Set & Display & mAs Value Set DisPlay

        // 6. max mAs Value Check
        double checkmAs = ma * ms / 1000;
        if (checkmAs > SysData.MaxMas.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 6 Max mAs Check Return");
            return;
            // Error Message Send & Return (Max mAs Over)
        }
        if (checkmAs < SysData.MinMas.toDouble()) {
            LogUtil.i("T5HSystem::AllValueReceiveSet Case 6 Min mAs Check Return");
            return;
            // Error Message Send & Return (Min mAs Less)
        }

        // 7. Bucky Select
        buckySelect(bucky);

        // 8. AUX Select
        auxSelect(aux);

        // 9. Patient Size
        patientSizeSelectDisplay(psize);
        LogUtil.i("T5HSystem::AllValueReceiveSet Finish");

    }

    public static void BeforeValueReceiveSet1(int bucky, int aux, int psize, boolean aec, int speed, boolean fl, boolean fc, boolean fr, int step) {
        // 1. Focus Value Check

        // 2. Bucky Select
        // :: Bucky 설정이 안되어 있을 때 예외 처리
        // :: None 버키 까지 안 쓸 경우 ??
        boolean tableBuckyCheck = SysData.UseBuckyStand.toString().equals("0");
        boolean standBuckyCheck = SysData.UseBuckyTable.toString().equals("0");
        if (!SysData.WorkstationType.toString().equals("Elui")) {
            if (standBuckyCheck && bucky == 2) {
                buckySelect(2);
            } else if (tableBuckyCheck && bucky == 1) {
                buckySelect(1);
            }

        }

        // 3. AUX Select
        auxSelect(aux);

        // 4. Patient Size
        patientSizeSelectDisplay(psize);

        // 5. AEC
        if ((SysData.Bucky1_AECUse.toString().equals("1") || SysData.Bucky2_AECUse.toString().equals("1"))) {
            if (_buckyselect != 0) {
                AECModeControl(aec);

                // AEC Speed
                if (speed == 0) {
                    MainCenterView.film_screen_L.setSelected(true);
                    MainCenterView.film_screen_M.setSelected(false);
                    MainCenterView.film_screen_H.setSelected(false);
                    _aecLevel = 0;
                } else if (speed == 1) {
                    MainCenterView.film_screen_L.setSelected(false);
                    MainCenterView.film_screen_M.setSelected(true);
                    MainCenterView.film_screen_H.setSelected(false);
                    _aecLevel = 1;
                } else {
                    MainCenterView.film_screen_L.setSelected(false);
                    MainCenterView.film_screen_M.setSelected(false);
                    MainCenterView.film_screen_H.setSelected(true);
                    _aecLevel = 2;
                }

                // AEC Field
                _aecFieldOn_L = fl;
                _aecFieldOn_C = fc;
                _aecFieldOn_R = fr;
                AECFieldControl2();
                LogUtil.i("T5HSystem::AECValueReceiveSet Field L: " + _aecFieldOn_L + " B: " + _aecFieldOn_C + " R: " + _aecFieldOn_R);

                // Density Step Display
                _densityStep = step;
                String densitystring = Integer.toString(_densityStep);
                T5H.getInstance().sendDensityValueChanged(densitystring);// Density Value Display로 연결
            } else {
                aec_LinearLayout.setAlpha(0.5f);
                T5HUtil.setViewAndChildrenEnabled(aec_LinearLayout, false);
            }
        }
    }

    // APR로부터 받은 aec Value Set&Display (단순 Set&Display)
    public static void AECValueReceiveSet(boolean aec, int speed, boolean fl, boolean fc, boolean fr, int step) {
        if (_buckyselect != 0) {
            AECModeControl(aec);

            // AEC Speed
            if (speed == 0) {
                MainCenterView.film_screen_L.setSelected(true);
                MainCenterView.film_screen_M.setSelected(false);
                MainCenterView.film_screen_H.setSelected(false);
                _aecLevel = 0;
            } else if (speed == 1) {
                MainCenterView.film_screen_L.setSelected(false);
                MainCenterView.film_screen_M.setSelected(true);
                MainCenterView.film_screen_H.setSelected(false);
                _aecLevel = 1;
            } else {
                MainCenterView.film_screen_L.setSelected(false);
                MainCenterView.film_screen_M.setSelected(false);
                MainCenterView.film_screen_H.setSelected(true);
                _aecLevel = 2;
            }

            // AEC Field
            _aecFieldOn_L = fl;
            _aecFieldOn_C = fc;
            _aecFieldOn_R = fr;
            AECFieldControl2();
            LogUtil.i("T5HSystem::AECValueReceiveSet Field L: " + _aecFieldOn_L + " B: " + _aecFieldOn_C + " R: " + _aecFieldOn_R);

            // Density Step Display
            _densityStep = step;
            String densitystring = Integer.toString(_densityStep);
            T5H.getInstance().sendDensityValueChanged(densitystring);// Density Value Display로 연결
        } else {
            if (!aec) {
                MainTopView.mLayout_main_ms.setAlpha(1);
                MainTopView.mLayout_main_mAs.setAlpha(1);
                if (!SysData.ThemeType.toString().equals("Light")) {
                    MainTopView.ms_txt.setTextColor(Color.parseColor("#aaaaaa"));
                    MainTopView.mas_txt.setTextColor(Color.parseColor("#aaaaaa"));
                } else {
                    MainTopView.ms_txt.setTextColor(Color.BLACK);
                    MainTopView.mas_txt.setTextColor(Color.BLACK);
                }
                MainTopView.btnMsUp.setEnabled(true);
                MainTopView.btnMsDown.setEnabled(true);
                MainTopView.btnMasUp.setEnabled(true);
                MainTopView.btnMasDown.setEnabled(true);
            }
        }
        LogUtil.i("T5HSystem::AECValueReceiveSet Finish");

    }

    // AEC사용중일 경우 kv값이 50미만이면 사용못하게 하는함수
    public static void AECAutoOff(double kv) {
        if ((SysData.Bucky1_AECUse.toString().equals("1") || SysData.Bucky2_AECUse.toString().equals("1"))) {
            if (kv < 50) {
                // AEC 사용중일 경우 종료
                if (MainCenterView.aec_onoff.isChecked()) {
                    MainCenterView.aec_onoff.setChecked(false);
                    T5HSystem._isAecOn = false;
                    T5HSystem._isBeforeAecOn = false;
                    T5HSystem.ModeChange(0);
                    aec_LinearLayout.setAlpha(0.5f);
                    T5HUtil.setViewAndChildrenEnabled(aec_LinearLayout, false);
//                    aec_LinearLayout.setVisibility(View.INVISIBLE);
                    LogUtil.i("T5HSystem::btn_aec_onoff OFF");
                    // Elui 전송
                    EluiSystem.eluiEqualsAECOnOffData();
                }
            }
        }
    }

    // AEC On/Off 제어
    public static void AECModeControl(boolean aec) {
        if ((SysData.Bucky1_AECUse.toString().equals("1") || SysData.Bucky2_AECUse.toString().equals("1"))) {
            if (_kv >= 50) {
                if (aec) {
                    if (!MainCenterView.aec_onoff.isChecked()) {
                        MainCenterView.aec_onoff.setChecked(true);
                        T5HSystem._isAecOn = true;
                        T5HSystem._isBeforeAecOn = true;
                        T5HSystem.ModeChange(1);
                        aec_LinearLayout.setAlpha(1f);
                        T5HUtil.setViewAndChildrenEnabled(aec_LinearLayout, true);
//                        aec_LinearLayout.setVisibility(View.VISIBLE);
                        LogUtil.i("T5HSystem::AECModeControl UseAEC-0 : " + aec + " isAecOn : " + T5HSystem._isAecOn);

                    } else {
                        T5HSystem._isAecOn = true;
                        T5HSystem._isBeforeAecOn = true;
                        T5HSystem.ModeChange(1);
                        LogUtil.i("T5HSystem::AECModeControl UseAEC-1 : " + aec + " isAecOn : " + T5HSystem._isAecOn);

                    }
                } else {
                    // AEC 사용중일 경우 종료
                    //if(MainCenterView.aec_onoff.isChecked())
                    {
                        MainCenterView.aec_onoff.setSelected(false);
                        T5HSystem._isAecOn = false;
                        T5HSystem._isBeforeAecOn = false;
                        T5HSystem.ModeChange(0);
                        aec_LinearLayout.setAlpha(0.5f);
                        T5HUtil.setViewAndChildrenEnabled(aec_LinearLayout, false);
//                        aec_LinearLayout.setVisibility(View.INVISIBLE);
                        LogUtil.i("T5HSystem::AECModeControl UseAEC-2 : " + aec + " isAecOn : " + T5HSystem._isAecOn);
                    }
                }
            } else {
                // AEC 사용중일 경우 종료
                //if(MainCenterView.aec_onoff.isChecked())
                {
                    MainCenterView.aec_onoff.setSelected(false);
                    T5HSystem._isAecOn = false;
                    T5HSystem._isBeforeAecOn = false;
                    T5HSystem.ModeChange(0);
                    aec_LinearLayout.setAlpha(0.5f);
                    T5HUtil.setViewAndChildrenEnabled(aec_LinearLayout, false);
//                    aec_LinearLayout.setVisibility(View.INVISIBLE);
                    LogUtil.i("T5HSystem::AECModeControl UseAEC-3 : " + aec + " isAecOn : " + T5HSystem._isAecOn);

                }
            }
        }
        LogUtil.i("T5HSystem::AECModeControl UseAEC-4 : " + aec + " isAecOn : " + T5HSystem._isAecOn);

    }

    // Main 화면 kV Control Status bar 적용 함수
    public static double kvControlValue(double kv) {
        _kv = kv;

        if (_kv > SysData.MaxKv.toDouble()) {
            _kv = SysData.MaxKv.toDouble();
        }
        if (_kv <= 40.0) {
            _kv = 40.0;
        }
        if (_kv < SysData.MinKv.toDouble()) {
            _kv = SysData.MinKv.toDouble();
        }
        AECAutoOff(_kv);
        _kvDAC = FindFinalKvDACValueTable(_kv);
        kvDisplayFilterSend();

        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;

        // kV별 mS가 0이되는 mA값 확인 (최대 kW 적용ver)230206
//        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus, _kv);
        tablevalue_mszero_ma = opMgr.getRange_mA(opMgr.castFocusFrom(_focus), (int) _kv).max;
        // 최대 kW조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv * _ma / 1000;
        LogUtil.i(TAG, "tableValue ms Zero : " + tablevalue_mszero_ma + " , now kW Value : " + nowkwValue + " , now Max Power : " + SysData.MaxPower.toDouble());
        if (nowkwValue > SysData.MaxPower.toDouble()) {
            final operationManager.focal focal = _focus == 0 ? operationManager.focal.large
                    : operationManager.focal.small;

            final operationManager.range rg = opMgr.getRange_mA(focal, (int) _kv);

            if (rg != null) {
                _ma = rg.max;
            }
//            _ma = FindNearestNotEqualLessValue(_maTbl, tablevalue_mszero_ma);
//            _ma = FindNearestNotEqualLessValue(_maTbl, _ma);
            maDisplayFilterSend();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);
            if (_ms > tablevalue_ms) {
                _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSend();
            }
            ComputeMas();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControlValue over kW kV: " + _kv + " mS: " + _ms + " mA: " + _ma + " Zero mA: " + tablevalue_mszero_ma + " now kW: " + nowkwValue);
        }

        // 자동으로 ms가 0이되는 ma값
        if (_ma > tablevalue_mszero_ma) {
            _ma = tablevalue_mszero_ma;
            maDisplayFilterSend();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);
            if (_ms > tablevalue_ms) {
                //LogUtil.i("test t FindNearstMs ms is over");
                _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSend();
            }
            ComputeMas();    // mAs Value 변경
        }
        // TODO: 2024-12-17 : 나중에 조사조건 공통화 할때 변경해줘야댐 .!!
        mainFocusControl.kVControlToFocus();

        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);
        //LogUtil.i("T5HSystem::kvControlValue FindNearstMs ms is : " + tablevalue_ms + " now ms : " + _ms);
        if (_ms > tablevalue_ms) {
            _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSend();
            ComputeMas();    // mAs Value 변경
            //LogUtil.i("T5HSystem::kvControlValue FindNearstMs ms is over Send ms : " + _ms);
        }

        //LogUtil.i("T5HSystem::kvControlValue now 2 kV:"+_kv +" zero ms:"+ _ms+ " foundma : " + tablevalue_mszero_ma);
        EluiSystem.sendExamDataAndAECData(SendEluiData.KV);
        return _kv;
    }

    // kV Control Button up/down
    public static double kvControl(boolean up) {
        if (up) {
            _kv++;
        } else {
            _kv--;
        }
        if (_kv <= 40.0) {
            _kv = 40.0;
        }
        if (_kv > SysData.MaxKv.toDouble()) {
            _kv = SysData.MaxKv.toDouble();
        }
        if (_kv < SysData.MinKv.toDouble()) {
            _kv = SysData.MinKv.toDouble();
        }
        AECAutoOff(_kv);
        _kvDAC = FindFinalKvDACValueTable(_kv);
        kvDisplayFilterSend();

        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
//        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus, _kv);
        tablevalue_mszero_ma = opMgr.getRange_mA(opMgr.castFocusFrom(_focus), (int) _kv).max;
        // 최대 kW조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv * _ma / 1000;
        //operationManager.markStatus(nowkwValue + " " + SysData.MaxPower.toDouble());

        //LogUtil.i("kvControl now 1 kv:"+_kv +" ms:"+ _ms+ " mA:" + _ma+ " Zero mA: " + tablevalue_mszero_ma + " now KW: "+ nowkwValue);
        if (nowkwValue > SysData.MaxPower.toDouble()) {
            final operationManager.focal focal = _focus == 0 ? operationManager.focal.large
                    : operationManager.focal.small;

            final operationManager.range rg = opMgr.getRange_mA(focal, (int) _kv);

            if (rg != null) {
                _ma = rg.max;
            }

            //_ma = FindNearestNotEqualLessValue(_maTbl, tablevalue_mszero_ma);
            //_ma = FindNearestNotEqualLessValue(_maTbl, _ma);
            //operationManager.markStatus(tablevalue_mszero_ma + " " + _ma);
            maDisplayFilterSend();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);
            if (_ms > tablevalue_ms) {
                _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSend();
            }
            ComputeMas();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControl over kW kV: " + _kv + " mA: " + _ma + " mS: " + _ms + " Now kW: " + nowkwValue);
        }

        // 자동으로 ms가 0이되는 ma값
        if (_ma > tablevalue_mszero_ma) {
            _ma = tablevalue_mszero_ma;
            maDisplayFilterSend();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);
            if (_ms > tablevalue_ms) {
                //LogUtil.i("test t FindNearstMs ms is over");
                _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSend();
            }
            ComputeMas();    // mAs Value 변경
        }

        // TODO: 2024-12-17 : 나중에 조사조건 공통화 할때 변경해줘야댐 .!!
        mainFocusControl.kVControlToFocus();

        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);
        //LogUtil.i("T5HSystem::kvControl FindNearstMs ms is : " + tablevalue_ms + " now ms : " + _ms);
        if (_ms > tablevalue_ms) {
            _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSend();
            ComputeMas();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControl FindNearstMs mS is over Send mS : " + _ms);
        }

        LogUtil.i("T5HSystem::kvControl Finish kV: " + _kv + " mA: " + _ma + " mS: " + _ms + " Found ZeromA : " + tablevalue_mszero_ma);
        return _kv;
    }

    // SeekBar 상태 변경
    public static void kvStatusBarChange() {
        seekbarKv.setProgress((int) _kv - SysData.MinKv.toInteger());
        //seekbarKv.setProgress((int)_kv - SysData.MinKv.toInteger());

        seekbarKv.onSizeChanged(seekbarKv.getWidth(), seekbarKv.getHeight(), 0, 0);
        LogUtil.i("T5HSystem::kvStatusBarChange : " + ((int) _kv - SysData.MinKv.toInteger())
                + " MinkV : " + SysData.MinKv.toInteger());
    }

    // kV Display Filter & Send Display
    public static void kvDisplayFilterSend() {
        String kvstring = String.format("%.0f", _kv);
        T5H.getInstance().sendKvValueChanged(kvstring);    // kV Value Display 로 연결
    }

    // mA Display Filter & Send Display
    public static void maDisplayFilterSend() {
        String mastring;
        if (_ma == 12.5) {
            mastring = String.format("%.1f", _ma);
        } else {
            mastring = String.format("%.0f", _ma);
        }

        LogUtil.i("T5HSystem::maDisplayFilterSend mA: " + mastring);
        T5H.getInstance().sendMaValueChanged(mastring);    // mA Value Display로 연결
    }

    // mA Control
    public static double maControl(boolean up) {
        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus, _kv);

        // 최대 kW 조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv * ExposureValueControlFunction(_maTbl, _ma, up) / 1000;

        double limitmAValue = SysData.MaxMas.toDouble() * 1000 / _ms;
        double limitMinmAValue = SysData.MinMas.toDouble() * 1000 / _ms;

        if (up) {

//            LogUtil.i("T5HSystem::maControl FindMsZeroMaValue mA: " + tablevalue_mszero_ma + " table mA : " + ExposureValueControlFunction(_maTbl, _ma, up)
//                    + " , Limit Max mA Value mAs : " + limitmAValue);
            // 231018 기존사용분애서 조건문수정
            if (_ma >= SysData.MaxCurrent.toDouble()) {
                LogUtil.i("T5HSystem::maControl Setup limitmAValue mA  : " + SysData.MaxCurrent.toDouble() + " mA : " + _ma);
                return _ma;
            }
            // mA가 바뀌어도 kV에는 영향미치면 안됨 (우선순위 1:kV 2:mA 3:mS)
            // MaxPower는 kV에 영향을미치게되서 조건문 넣음
            // 추가 (예외처리 1프로 예외 + )
            if (nowkwValue > SysData.MaxPower.toDouble() + (SysData.MaxPower.toDouble() / 100)) {
                LogUtil.i("T5HSystem::maControl limitmAValue mA 1 : " + limitmAValue + " table mA : " + _ma + " Now kW : " + nowkwValue + " Max kW : " + SysData.MaxPower.toDouble());
                return _ma;
            }
            if (_login_master) {
                if (!SysData.FocusAutoChange.toBoolean()) {
                    final float smallMax_mA = opMgr.getRange_mA(operationManager.focal.small
                            , (int) _kv).max;
                    LogUtil.i("T5HSystem::maControl Focus Auto Change Off Mode : " + smallMax_mA);
                    // Small
                    if (_focus == 1 && smallMax_mA < ExposureValueControlFunction(_maTbl, _ma, up)) {
                        return _ma;
                    }
                }
            }

            if (ExposureValueControlFunction(_maTbl, _ma, up) >= tablevalue_mszero_ma) {
                LogUtil.i("T5HSystem::maControl : " + ExposureValueControlFunction(_maTbl, _ma, up) + " , " + tablevalue_mszero_ma);
                return _ma;
            } else {
                _ma = ExposureValueControlFunction(_maTbl, _ma, up);
                //operationManager.markStatus(_ma + " " + up);

                final operationManager.range rg = opMgr.getRange_mA(operationManager.focal.large
                        , (int) _kv);

                if (rg != null) {
                    if (_ma > rg.max) _ma = rg.max;
                }
                //operationManager.markStatus(_ma + " " + up + " " + rg.toString() + " " + _kv);
            }

        } else {
            // 추가조건문
            if (_ma <= SysData.MinCurrent.toDouble()) {
                LogUtil.i("T5HSystem::maControl Setup limitmAValue mA  : " + SysData.MinCurrent.toDouble() + " mA : " + _ma);
                return _ma;
            }

            // 조건문 Test Limit

            LogUtil.i("T5HSystem::maControl Setup Limit Min mAs Value : " + limitMinmAValue
                    + " , now mA Value : " + _ma + " , next mA Value : " + ExposureValueControlFunction(_maTbl, _ma, up));
            if (ExposureValueControlFunction(_maTbl, _ma, up) < limitMinmAValue)
                return _ma;
            else
                _ma = ExposureValueControlFunction(_maTbl, _ma, up);

            // AEC Back UP Time 에 의한 ma 조건문
            if (_isAecOn) {
                _ms = SysData.AECBackupTime.toDouble();
                T5HSystem.ComputeMas();
                T5HSystem.msDisplayFilterSend();
            }
        }
        _maDAC = FindFinalMaDACValueTable(_focus, _ma, (int) _kv);

        mainFocusControl.checkAutoFocusChange(_focus, _kv, _ma);

        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);

        // 230707 최대 mas 관련 ms 변경추가 hj
        double calmas = (_ma * _ms) / 1000;
        double limitms = SysData.MaxMas.toDouble() * 1000 / _ma;

        if (calmas > SysData.MaxMas.toDouble()) {
            LogUtil.i("T5HSystem::maControl calmas is over ms: " + _ms);
            _ms = FindNearestLessValue(_msTbl, limitms);
            msDisplayFilterSend();
            LogUtil.i("T5HSystem::maControl calmas is over near ms: " + _ms);
        }
        //LogUtil.i("T5HSystem::maControl FindNearstMs ms is : " + tablevalue_ms + " now ms : " + _ms);
        if (_ms > tablevalue_ms) {
            LogUtil.i("T5HSystem::maControl FindNearstMs mS is over");
            _ms = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSend();
            LogUtil.i("T5HSystem::maControl FindNearstMs mS is over Send mS : " + _ms);
        }
        // Filament Option Filtering(Small 일경우)
        maControlFilamentSmall(_ma);
        // ma값 Display 소수점 필터링 및 전송
        maDisplayFilterSend();

        ComputeMas();    // mAs Value 변경
        LogUtil.i("T5HSystem::maControl Finish mA: " + _ma);
        return _ma;
    }

    // mA Control Filament Small
    // Filament 옵션 Small로 되어있을경우 Focus AutoChange Value 까지만 mA 올라감
    public static double maControlFilamentSmall(double ma) {
        if (SysData.FilamentType.toString().equalsIgnoreCase("Small")) {
            if (ma > SysData.FocusAutoChangeValue.toDouble()) {
                _ma = SysData.FocusAutoChangeValue.toDouble();
                ma = _ma;
            }
        }

        LogUtil.i("T5HSystem::maControlFilamentSmall mA Value: " + ma + " final mA: " + _ma + " AutoChangeValue: " + SysData.FocusAutoChangeValue.toDouble());
        return _ma;
    }

    // mA Control Filament Small
    // Filament 옵션 Small로 되어있을경우 Focus AutoChange Value 까지만 mA 올라감
    public static double maControlFilamentSmallScope(double ma) {
        if (SysData.FilamentType.toString().equalsIgnoreCase("Small")) {
            if (ma > SysData.FocusAutoChangeValue.toDouble()) {
                _ma_Scope = SysData.FocusAutoChangeValue.toDouble();
                ma = _ma_Scope;
            }
        }

        LogUtil.i("T5HSystem::maControlFilamentSmallScope mA Value: " + ma + " final mA: " + _ma_Scope + " AutoChangeValue: " + SysData.FocusAutoChangeValue.toDouble());
        return _ma_Scope;
    }

    // mS Control
    public static double msControl(boolean up) {
        double table_ms = 0;

        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus, _kv, _ma);

        double limitmSValue_MaxMas = SysData.MaxMas.toDouble() * 1000 / _ma;
        double limitmSValue_MinMas = SysData.MinMas.toDouble() * 1000 / _ma;
        double limitmSValue_MaxExposure = SysData.MaxExposureTime.toDouble();
        double limitmSValue_MinExposure = SysData.MinExposureTime.toDouble();

//        LogUtil.i("T5HSystem::msControl Cal limitmSValue: " + limitmSValue_MinMas + " LiMIT tablevalue_ms: "+ tablevalue_ms);
        LogUtil.i("T5HSystem::msControl Cal _ms 1 : " + _ms + " MAX mAs: " + SysData.MaxMas.toDouble() + " Limit case1: " + limitmSValue_MaxMas + " Limit case2: " + limitmSValue_MaxExposure);

        if (up) {
            if (limitmSValue_MaxMas < ExposureValueControlFunction(_msTbl, _ms, up)) {
                LogUtil.i("T5HSystem::msControl Cal _ms 2 : " + _ms + " MAX mAs: " + SysData.MaxMas.toDouble() + " Limit case1: " + limitmSValue_MaxMas + " Limit case2: " + limitmSValue_MaxExposure);
                return _ms;
            }
            if (limitmSValue_MaxExposure < ExposureValueControlFunction(_msTbl, _ms, up)) {
                LogUtil.i("T5HSystem::msControl Cal _ms 3 : " + _ms + " MAX mAs: " + SysData.MaxMas.toDouble() + " Limit case1: " + limitmSValue_MaxMas + " Limit case2: " + limitmSValue_MaxExposure);
                return _ms;
            }

            if (ExposureValueControlFunction(_msTbl, _ms, up) > tablevalue_ms)
                return _ms;
            else
                _ms = ExposureValueControlFunction(_msTbl, _ms, up);
        } else {
            // Down - Min mAs Limit
            LogUtil.i(TAG, "msControl::Min mAs Limit : " + SysData.MinMas.toDouble() + " , now ms LimtValue : " + limitmSValue_MinMas
                    + " , next ms Value : " + ExposureValueControlFunction(_msTbl, _ms, up));

            if (limitmSValue_MinExposure > ExposureValueControlFunction(_msTbl, _ms, up)) {
                LogUtil.i("T5HSystem::msControl ms Min Value : " + limitmSValue_MinExposure + " , now Value : " + _ms);
                return _ms;
            }
            if (ExposureValueControlFunction(_msTbl, _ms, up) < limitmSValue_MinMas)
                return _ms;
            else
                _ms = ExposureValueControlFunction(_msTbl, _ms, up);
        }
        // ms값 Display 소수점 필터링 및 전송
        msDisplayFilterSend();

        ComputeMas();    // mAs Value 변경
        LogUtil.i("T5HSystem::msControl mS : " + _ms);
        return _ms;
    }

    // mS Display Filter & Send Display
    public static void msDisplayFilterSend() {
        String msstring = "";
        Double calms = 0.0;
        if (_ms >= 1000) {
            calms = _ms / 1000;
            txtSecFix.setTextColor(Color.parseColor("#3E3A39"));
            txtMsFix.setTextColor(Color.parseColor("#ABAFB2"));
            if (SysData.ThemeType.toString().equals(_themeDark)) {
                txtSecFix.setTextColor(Color.parseColor("#aaaaaa"));
                txtMsFix.setTextColor(Color.parseColor("#3E3A39"));
            }
        } else {
            calms = _ms;
            txtSecFix.setTextColor(Color.parseColor("#ABAFB2"));
            txtMsFix.setTextColor(Color.parseColor("#3E3A39"));
            if (SysData.ThemeType.toString().equals(_themeDark)) {
                txtSecFix.setTextColor(Color.parseColor("#3E3A39"));
                txtMsFix.setTextColor(Color.parseColor("#aaaaaa"));
            }
        }
        if (calms >= 16 || calms == 1 || calms == 2 || calms == 4 || calms == 5 || calms == 8 || calms == 10) {
            msstring = String.format("%.0f", calms);
        } else if (calms == 1.25) {
            msstring = String.format("%.2f", calms);
        } else {
            msstring = String.format("%.1f", calms);
        }

        T5H.getInstance().sendMsValueChanged(msstring);    // mS Value Display로 연결
    }

    // 		========================== Scope Mode Only Start ==========================
    //				Kv Control Scope Mode Btn Up/down (Scope Mode ONLY)
    public static double kvControlScope(boolean up) {
        if (up) {
            _kv_Scope++;
        } else {
            _kv_Scope--;
        }
        if (_kv_Scope <= 40.0) {
            _kv_Scope = 40.0;
        }
        if (_kv_Scope > SysData.MaxKv.toDouble()) {
            _kv_Scope = SysData.MaxKv.toDouble();
        }
        if (_kv_Scope < SysData.MinKv.toDouble()) {
            _kv_Scope = SysData.MinKv.toDouble();
        }

        _kvDAC_Scope = FindFinalKvDACValueTable(_kv_Scope);

        kvDisplayFilterSendScope();

        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
//        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus_Scope, _kv_Scope);

        tablevalue_mszero_ma = opMgr.getRange_mA(opMgr.castFocusFrom(_focus_Scope), (int) _kv_Scope).max;
        // 최대 kW조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv_Scope * _ma_Scope / 1000;

        if (nowkwValue > SysData.MaxPower.toDouble()) {
            _ma_Scope = FindNearestNotEqualLessValue(_maTbl, tablevalue_mszero_ma);
            _ma_Scope = FindNearestNotEqualLessValue(_maTbl, _ma_Scope);
            maDisplayFilterSendScope();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);
            if (_ms_Scope > tablevalue_ms) {
                _ms_Scope = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSendScope();
            }
            ComputeMasScope();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControlScope now 1-1 kv:" + _kv_Scope + " ms:" + _ms_Scope + " mA:" + _ma_Scope + " Zero mA: " + tablevalue_mszero_ma + " now KW: " + nowkwValue);
        }

        // 자동으로 ms가 0이되는 ma값
        if (_ma_Scope > tablevalue_mszero_ma) {
            _ma_Scope = tablevalue_mszero_ma;
            maDisplayFilterSendScope();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);
            if (_ms_Scope > tablevalue_ms) {
                //LogUtil.i("test t FindNearstMs ms is over");
                _ms_Scope = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSendScope();
            }
            ComputeMasScope();    // mAs Value 변경
        }


        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);
        LogUtil.i("T5HSystem::kvControl FindNearstMs mS is : " + tablevalue_ms + " now mS : " + _ms_Scope);
        if (_ms_Scope > tablevalue_ms) {
            _ms_Scope = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSendScope();
            ComputeMasScope();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControl FindNearstMs mS is over Send mS : " + _ms_Scope);
        }

        LogUtil.i("T5HSystem::kvControlScope now 2 kV:" + _kv_Scope + " mA:" + _ma_Scope + " zero mS:" + _ms_Scope + " foundZeromA : " + tablevalue_mszero_ma);
        return _kv_Scope;
    }

    public static double maControlScope(boolean up) {
        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus_Scope, _kv_Scope);

        // 최대 kW 조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv_Scope * ExposureValueControlFunction(_maTbl, _ma_Scope, up) / 1000;

        double limitmAValue = SysData.MaxMas.toDouble() * 1000 / _ms_Scope;
        double limitMinmAValue = SysData.MinMas.toDouble() * 1000 / _ms_Scope;

        if (up) {
            LogUtil.i("T5HSystem::maControlScope FindMsZeroMaValue mA: " + tablevalue_mszero_ma + " table mA : " + ExposureValueControlFunction(_maTbl, _ma_Scope, up));
            //if(_ma_AutoExpose >= limitmAValue || nowkwValue > SysData.MaxPower.toDouble())
            //mA가 바뀌어도 kV에는 영향미치면 안됨 (우선순위 1:kV 2:mA 3:mS)
            //MaxPower는 kV에 영향을미치게되서 조건문 넣음
            if (_ma_Scope >= SysData.MaxCurrent.toDouble()) {
                LogUtil.i("T5HSystem::maControlScope Setup limitmAValue mA  : " + SysData.MaxCurrent.toDouble() + " mA : " + _ma_Scope);
                return _ma_Scope;
            }
            if (nowkwValue > SysData.MaxPower.toDouble() + (SysData.MaxPower.toDouble() / 100)) {
                LogUtil.i("T5HSystem::maControlScope limitmAValue mA 1 : " + limitmAValue + " table mA : " + _ma_Scope);
                LogUtil.i("T5HSystem::maControlScope nowkwValue: " + nowkwValue + " MaxPower: " + SysData.MaxPower.toDouble());
                return _ma_Scope;
            }
            if (_login_master) {
                if (!SysData.FocusAutoChange.toBoolean()) {
                    final float smallMax_mA = opMgr.getRange_mA(operationManager.focal.small
                            , (int) _kv_Scope).max;
                    LogUtil.i("T5HSystem::maControl Focus Auto Change Off Mode : " + smallMax_mA);
                    // Small
                    if (_focus_Scope == 1 && smallMax_mA < ExposureValueControlFunction(_maTbl, _ma_Scope, up)) {
                        return _ma;
                    }
                }
            }


            if (ExposureValueControlFunction(_maTbl, _ma_Scope, up) >= tablevalue_mszero_ma) {
                return _ma_Scope;
            } else {
                // 추가 24.09.23 ma Control
                _ma_Scope = ExposureValueControlFunction(_maTbl, _ma_Scope, up);
                final operationManager.range rg = opMgr.getRange_mA(operationManager.focal.large
                        , (int) _kv_Scope);
                if (rg != null) {
                    if (_ma_Scope > rg.max) _ma_Scope = rg.max;
                }
            }
        } else {
            // 추가조건문
            if (_ma_Scope <= SysData.MinCurrent.toDouble()) {
                LogUtil.i("T5HSystem::maControlScope Setup limitmAValue mA  : " + SysData.MinCurrent.toDouble() + " mA : " + _ma_Scope);
                return _ma_Scope;
            }

            // 조건문 Test Limit
//            double calculatemas = 0.0;
//            calculatemas = _ma_Scope * _ms_Scope / 1000;
            if (ExposureValueControlFunction(_maTbl, _ma_Scope, up) < limitMinmAValue)
                return _ma_Scope;
            else
                _ma_Scope = ExposureValueControlFunction(_maTbl, _ma_Scope, up);
        }
        _maDAC_Scope = FindFinalMaDACValueTable(_focus_Scope, _ma_Scope, (int) _kv_Scope);
        // 24.09.23
        // Scope mA Control 에 대한 FocusAutoChange 재적용
        if (_login_master) {
            if (SysData.FocusAutoChange.toBoolean()) {
                final float smallMax_mA = opMgr.getRange_mA(operationManager.focal.small
                        , (int) _kv_Scope).max;
                final float change_mA = SysData.FocusAutoChangeValue.toFloat();
                final float applyMax_mA = Math.min(change_mA, smallMax_mA);
                if (_ma_Scope > applyMax_mA) {
                    // Focus가 Small일 경우
                    if (_focus_Scope == 1) {
                        focusValueReceiveSetScope(0);    // 0 : Large, 1 : Small
                        LogUtil.i("T5HSystem::maControlScope1 FocusAutoChange Check Now mA: " + _ma + " Now Focus: " + _focus + " , " + SysData.FocusAutoChangeValue.toDouble());
                    }
                } else if (_ma_Scope <= applyMax_mA) {
                    if (_focus_Scope == 0) {
                        focusValueReceiveSetScope(1);    // 0 : Large, 1 : Small
                        LogUtil.i("T5HSystem::maControlScope2 FocusAutoChange Check Now mA: " + _ma + " Now Focus: " + _focus + " , " + SysData.FocusAutoChangeValue.toDouble());
                    }
                }
            }
        } else {
            final float smallMax_mA = opMgr.getRange_mA(operationManager.focal.small
                    , (int) _kv_Scope).max;
            final float change_mA = SysData.FocusAutoChangeValue.toFloat();
            final float applyMax_mA = Math.min(change_mA, smallMax_mA);
            if (_ma_Scope > applyMax_mA) {
                // Focus가 Small일 경우
                if (_focus_Scope == 1) {
                    focusValueReceiveSetScope(0);    // 0 : Large, 1 : Small
                    LogUtil.i("T5HSystem::maControlScope1 FocusAutoChange Check Now mA: " + _ma + " Now Focus: " + _focus + " , " + SysData.FocusAutoChangeValue.toDouble());
                }
            } else if (_ma_Scope <= applyMax_mA) {
                if (_focus_Scope == 0) {
                    focusValueReceiveSetScope(1);    // 0 : Large, 1 : Small
                    LogUtil.i("T5HSystem::maControlScope2 FocusAutoChange Check Now mA: " + _ma + " Now Focus: " + _focus + " , " + SysData.FocusAutoChangeValue.toDouble());
                }
            }
        }


        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);

        // 230707 최대 mas 관련 ms 변경추가 hj
        double calmas = (_ma_Scope * _ms_Scope) / 1000;
        double limitms = SysData.MaxMas.toDouble() * 1000 / _ma_Scope;

        if (calmas > SysData.MaxMas.toDouble()) {
            LogUtil.i("T5HSystem::maControlScope calmas is over ms: " + _ms_Scope);
            _ms_Scope = FindNearestLessValue(_msTbl, limitms);
            msDisplayFilterSendScope();
            LogUtil.i("T5HSystem::maControlScope calmas is over near ms: " + _ms_Scope);
        }

        if (_ms_Scope > tablevalue_ms) {
            LogUtil.i("T5HSystem::maControlScope FindNearstMs mS is over");
            _ms_Scope = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSendScope();
            LogUtil.i("T5HSystem::maControlScope FindNearstMs mS is over Send mS : " + _ms_Scope);
        }
        // Filament Option Filtering (Small 일 경우)
        maControlFilamentSmallScope(_ma_Scope);
        // ma값 Display 소수점 필터링 및 전송
        maDisplayFilterSendScope();

        ComputeMasScope();    // mAs Value 변경
        LogUtil.i("T5HSystem::maControlScope Finish mA : " + _ma_Scope);
        return _ma_Scope;
    }

    //Only Scope Mode
    public static double msControlScope(boolean up) {
        double table_ms = 0;

        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_Scope, _kv_Scope, _ma_Scope);

        double limitmSValue_MaxMas = SysData.MaxMas.toDouble() * 1000 / _ma_Scope;
        double limitmsValue_MinMas = SysData.MinMas.toDouble() * 1000 / _ma_Scope;
        double limitmSValue_MinExposure = SysData.MinExposureTime.toDouble();
        double limitmSValue_MaxExposure = SysData.MaxExposureTime.toDouble();
        double limitVal = 200.0;
        LogUtil.i("T5HSystem::msControl Cal _ms: " + _ms_Scope + " MAX mAs: " + SysData.MaxMas.toDouble() + " Limit case1: " + limitmSValue_MaxMas + " Limit case2: " + limitmSValue_MaxExposure);

        if (up) {
            if (limitmSValue_MaxMas < ExposureValueControlFunction(_msTbl, _ms_Scope, up)) {
                //LogUtil.i("T5HSystem::msControl Cal _ms: " + _ms_AutoExpose + " MAX mAs: "+ SysData.MaxMas.toDouble() + " Limit case1: "+ limitmSValue_MaxMas + " Limit case2: "+ limitmSValue_MaxExposure);
                return _ms_Scope;
            }
            if (limitmSValue_MaxExposure < ExposureValueControlFunction(_msTbl, _ms_Scope, up)) {
                return _ms_Scope;
            }
            // 24.09.23 200ms 까지만 제한 해달라는 요청 추가 적용
            if (limitVal < ExposureValueControlFunction(_msTbl, _ms_Scope, up)) {
                return _ms_Scope;
            }
            if (ExposureValueControlFunction(_msTbl, _ms_Scope, up) > tablevalue_ms)
                return _ms_Scope;
            else
                _ms_Scope = ExposureValueControlFunction(_msTbl, _ms_Scope, up);
        } else {
            if (limitmSValue_MinExposure > ExposureValueControlFunction(_msTbl, _ms_Scope, up)) {
                LogUtil.i("T5HSystem::msControl ms Min Value : " + limitmSValue_MinExposure + " , now Value : " + _ms);
                return _ms_Scope;
            }
            // 조건문 Test Limit
            if (ExposureValueControlFunction(_msTbl, _ms_Scope, up) < limitmsValue_MinMas)
                return _ms_Scope;
            else
                _ms_Scope = ExposureValueControlFunction(_msTbl, _ms_Scope, up);
        }
        // ms값 Display 소수점 필터링 및 전송
        msDisplayFilterSendScope();

        ComputeMasScope();    // mAs Value 변경
        LogUtil.i("T5HSystem::msControl mS : " + _ms_Scope);
        return _ms_Scope;
    }

    // =====	Scope Filament , Rotor Display 		=========
    // 0 -> Current 1 -> filament PreHeat  2 -> filament Boost
    // 3 -> filament Ready 4 -> rotor Starting 5 -> rotor Running
    public static void FilamentPreHeatDisplayFilterSendScope(int type, float value) {
        if (type == 1) {
            PreheatList.add(value);
            String PreHeat = String.valueOf(value);
            T5H.getInstance().sendFilamentPreHeatDisplayChagedScope(PreHeat);
        }
    }

    public static void FilamentBoostDisplayFilterSendScope(int type, float value) {
        if (type == 2) {
            BoostList.add(value);
            String Boost = String.valueOf(value);
            T5H.getInstance().sendFilamentBoostDisplayChangedScope(Boost);
        }
    }

    public static void FilamentReadyDisplayFilterSendScope(int type, float value) {
        if (type == 3) {
            ReadyList.add(value);
            String Ready = String.valueOf(value);
            T5H.getInstance().sendFilamentReadyDisplayChangedScope(Ready);
        }
    }

    public static void RotorStartingDisplayFilterSendScope(int type, float value) {
        if (type == 4) {
            StartingList.add(value);
            String Starting = String.valueOf(value);
            T5H.getInstance().sendRotorStartingDisplayChangedScope(Starting);
            LogUtil.i("ROTOR TEST Starting::: " + Starting);
        }
    }

    public static void RotorRunningDisplayFilterSendScope(int type, float value) {
        if (type == 5) {
            RunningList.add(value);
            String Running = String.valueOf(value);
            T5H.getInstance().sendRotorRunningDisplayChangedScope(Running);
            LogUtil.i("ROTOR TEST Running::: " + Running);
        }
    }

    public static void kvInitOptionScope() {
        if (_kv_Scope > SysData.MaxKv.toDouble()) {
            _kv_Scope = SysData.MaxKv.toDouble();
            kvDisplayFilterSendScope();
        }
    }

    public static void kvDisplayFilterSendScope() {
        String kvstring = String.format("%.0f", _kv_Scope);
        T5H.getInstance().sendKvValueChangedScope(kvstring);    // kV Value Display Auto 로 연결
    }

    public static void maDisplayFilterSendScope() {
        String mastring;
        if (_ma_Scope == 12.5) {
            mastring = String.format("%.1f", _ma_Scope);
        } else {
            mastring = String.format("%.0f", _ma_Scope);
        }

        T5H.getInstance().sendMaValueChangedScope(mastring);    // mA Value Display로 연결
    }

    public static void msDisplayFilterSendScope() {
        String msstring = "";
        Double calms = 0.0;

        calms = _ms_Scope;

        if (calms >= 16 || calms == 1 || calms == 2 || calms == 4 || calms == 5 || calms == 8 || calms == 10) {
            msstring = String.format("%.0f", calms);
        } else if (calms == 1.25) {
            msstring = String.format("%.2f", calms);
        } else {
            msstring = String.format("%.1f", calms);
        }

        T5H.getInstance().sendMsValueChangedScope(msstring);    // mS Value Display로 연결
    }

    // ===== Auto Expose Mode Only Start =====
    // kV Control Auto Button up/down (AUTO EXPOSE MODE ONLY)
    public static double kvControlAuto(boolean up) {
        if (up) {
            _kv_AutoExpose++;
        } else {
            _kv_AutoExpose--;
        }
        if (_kv_AutoExpose <= 40.0) {
            _kv_AutoExpose = 40.0;
        }
        if (_kv_AutoExpose > SysData.MaxKv.toDouble()) {
            _kv_AutoExpose = SysData.MaxKv.toDouble();
        }
        if (_kv_AutoExpose < SysData.MinKv.toDouble()) {
            _kv_AutoExpose = SysData.MinKv.toDouble();
        }

        _kvDAC_AutoExpose = FindFinalKvDACValueTable(_kv_AutoExpose);
        kvDisplayFilterSendAuto();

        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
//        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus_AutoExpose, _kv_AutoExpose);
        tablevalue_mszero_ma = opMgr.getRange_mA(opMgr.castFocusFrom(_focus_AutoExpose), (int) _kv_AutoExpose).max;

        // 최대 kW조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv_AutoExpose * _ma_AutoExpose / 1000;

        //LogUtil.i("kvControl now 1 kv:"+_kv +" ms:"+ _ms+ " mA:" + _ma+ " Zero mA: " + tablevalue_mszero_ma + " now KW: "+ nowkwValue);
        if (nowkwValue > SysData.MaxPower.toDouble()) {
            _ma_AutoExpose = FindNearestNotEqualLessValue(_maTbl, tablevalue_mszero_ma);
            _ma_AutoExpose = FindNearestNotEqualLessValue(_maTbl, _ma_AutoExpose);
            maDisplayFilterSendAuto();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus_AutoExpose, _kv_AutoExpose, _ma_AutoExpose);
            if (_ms_AutoExpose > tablevalue_ms) {
                _ms_AutoExpose = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSendAuto();
            }
            ComputeMasAuto();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControlAuto now 1-1 kv:" + _kv_AutoExpose + " ms:" + _ms_AutoExpose + " mA:" + _ma_AutoExpose + " Zero mA: " + tablevalue_mszero_ma + " now KW: " + nowkwValue);
        }

        // 자동으로 ms가 0이되는 ma값
        if (_ma_AutoExpose > tablevalue_mszero_ma) {
            _ma_AutoExpose = tablevalue_mszero_ma;
            maDisplayFilterSendAuto();
            // 해당 kV, mA별 최대 mS 값 계산
            double tablevalue_ms = 0;
            tablevalue_ms = FindFinalMsValue(_focus_AutoExpose, _kv_AutoExpose, _ma_AutoExpose);
            if (_ms_AutoExpose > tablevalue_ms) {
                //LogUtil.i("test t FindNearstMs ms is over");
                _ms_AutoExpose = FindNearestLessValue(_msTbl, tablevalue_ms);
                msDisplayFilterSendAuto();
            }
            ComputeMasAuto();    // mAs Value 변경
        }
        if (_login_master) {
            if (SysData.FocusAutoChange.toBoolean()) {
                if (_ma_AutoExpose > SysData.FocusAutoChangeValue.toDouble()) {
                    // Focus가 Small일 경우
                    if (_focus_AutoExpose == 1)
                        focusValueReceiveSetAuto(0);    // 0 : Large, 1 : Small
                } else {
                    // Focus가 Large일 경우
                    if (_focus_AutoExpose == 0)
                        focusValueReceiveSetAuto(1);
                }
                LogUtil.i("T5HSystem::kvControl FocusAutoChange Test mA: " + _ma_AutoExpose + " ChangeValue: " + SysData.FocusAutoChangeValue.toDouble());
            }
        } else {
            if (_ma_AutoExpose > SysData.FocusAutoChangeValue.toDouble()) {
                // Focus가 Small일 경우
                if (_focus_AutoExpose == 1)
                    focusValueReceiveSetAuto(0);    // 0 : Large, 1 : Small
            } else {
                // Focus가 Large일 경우
                if (_focus_AutoExpose == 0)
                    focusValueReceiveSetAuto(1);
            }
            LogUtil.i("T5HSystem::kvControl FocusAutoChange Test mA: " + _ma_AutoExpose + " ChangeValue: " + SysData.FocusAutoChangeValue.toDouble());
        }


        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_AutoExpose, _kv_AutoExpose, _ma_AutoExpose);
        LogUtil.i("T5HSystem::kvControl FindNearstMs mS is : " + tablevalue_ms + " now mS : " + _ms_AutoExpose);
        if (_ms_AutoExpose > tablevalue_ms) {
            _ms_AutoExpose = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSendAuto();
            ComputeMasAuto();    // mAs Value 변경
            LogUtil.i("T5HSystem::kvControl FindNearstMs mS is over Send mS : " + _ms_AutoExpose);
        }

        LogUtil.i("T5HSystem::kvControl now 2 kV:" + _kv_AutoExpose + " mA:" + _ma_AutoExpose + " zero mS:" + _ms_AutoExpose + " foundZeromA : " + tablevalue_mszero_ma);
        return _kv_AutoExpose;
    }

    // mA Control Filament Small
    // Filament 옵션 Small로 되어있을경우 Focus AutoChange Value 까지만 mA 올라감
    public static double maControlFilamentSmallAuto(double ma) {
        if (SysData.FilamentType.toString().equalsIgnoreCase("Small")) {
            if (ma > SysData.FocusAutoChangeValue.toDouble()) {
                _ma_AutoExpose = SysData.FocusAutoChangeValue.toDouble();
                ma = _ma_AutoExpose;
            }
        }

        LogUtil.i("T5HSystem::maControlFilamentSmallAuto mA Value: " + ma + " final mA: " + _ma + " AutoChangeValue: " + SysData.FocusAutoChangeValue.toDouble());
        return _ma_AutoExpose;
    }

    // mA Control Auto Button up/down (AUTO EXPOSE MODE ONLY)
    public static double maControlAuto(boolean up) {
        // kV별 mS가 0이되는 mA값 확인
        double tablevalue_mszero_ma = 0;
        tablevalue_mszero_ma = FindMsZeroMaValueFinal(_focus_AutoExpose, _kv_AutoExpose);

        // 최대 kW 조정용 Test함수
        double nowkwValue = 0;
        nowkwValue = _kv_AutoExpose * ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up) / 1000;

        double limitmAValue = SysData.MaxMas.toDouble() * 1000 / _ms_AutoExpose;
        double limitMinmAValue = SysData.MinMas.toDouble() * 1000 / _ms_AutoExpose;
        if (up) {
            LogUtil.i("T5HSystem::maControlAuto FindMsZeroMaValue mA: " + tablevalue_mszero_ma + " table mA : " + ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up));
            //if(_ma_AutoExpose >= limitmAValue || nowkwValue > SysData.MaxPower.toDouble())
            // 231018 기존사용분애서 조건문수정
            if (_ma_AutoExpose >= SysData.MaxCurrent.toDouble()) {
                LogUtil.i("T5HSystem::maControlAuto Setup limitmAValue mA  : " + SysData.MaxCurrent.toDouble() + " mA : " + _ma_AutoExpose);
                return _ma_AutoExpose;
            }
            //MaxPower는 kV에 영향을미치게되서 조건문 넣음
            if (nowkwValue > SysData.MaxPower.toDouble() + (SysData.MaxPower.toDouble() / 100)) {
                LogUtil.i("T5HSystem::maControlAuto limitmAValue mA 1 : " + limitmAValue + " table mA : " + _ma_AutoExpose);
                LogUtil.i("T5HSystem::maControlAuto nowkwValue: " + nowkwValue + " MaxPower: " + SysData.MaxPower.toDouble());
                return _ma_AutoExpose;
            }
            if (_login_master) {
                if (!SysData.FocusAutoChange.toBoolean()) {
                    final float smallMax_mA = opMgr.getRange_mA(operationManager.focal.small
                            , (int) _kv_AutoExpose).max;
                    LogUtil.i("T5HSystem::maControl Focus Auto Change Off Mode : " + smallMax_mA);
                    // Small
                    if (_focus_AutoExpose == 1 && smallMax_mA < ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up)) {
                        return _ma;
                    }
                }
            }


            if (ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up) >= tablevalue_mszero_ma) {
                return _ma_AutoExpose;
            } else {
                _ma_AutoExpose = ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up);
            }
        } else {
            // 추가조건문
            if (_ma_AutoExpose <= SysData.MinCurrent.toDouble()) {
                LogUtil.i("T5HSystem::maControlAuto Setup limitmAValue mA  : " + SysData.MinCurrent.toDouble() + " mA : " + _ma_AutoExpose);
                return _ma_AutoExpose;
            }

            // 조건문 Test Limit
            double calculatemas = 0.0;
            calculatemas = _ma_AutoExpose * _ms_AutoExpose / 1000;
            LogUtil.i(TAG, "mAControl::AutoExpose : Min Limit mAs Value : " + limitMinmAValue + " , now mA Value : " + _ma_AutoExpose);
            if (ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up) < limitMinmAValue)
                return _ma_AutoExpose;
            else
                _ma_AutoExpose = ExposureValueControlFunction(_maTbl, _ma_AutoExpose, up);
        }
        _maDAC_AutoExpose = FindFinalMaDACValueTable(_focus_AutoExpose, _ma_AutoExpose, (int) _kv_AutoExpose);
        if (_login_master) {
            if (SysData.FocusAutoChange.toBoolean()) {
                if (_ma_AutoExpose > SysData.FocusAutoChangeValue.toDouble()) {
                    // Focus가 Small일 경우
                    if (_focus_AutoExpose == 1)
                        focusValueReceiveSetAuto(0);    // 0 : Large, 1 : Small
                } else {
                    // Focus가 Large일 경우
                    if (_focus_AutoExpose == 0)
                        focusValueReceiveSetAuto(1);    // 0 : Large, 1 : Small
                }
                LogUtil.i("T5HSystem::maControlAuto FocusAutoChange Check mA: " + _ma_AutoExpose + " Focus Auto Change mA: " + SysData.FocusAutoChangeValue.toDouble());
            }
        } else {
            if (_ma_AutoExpose > SysData.FocusAutoChangeValue.toDouble()) {
                // Focus가 Small일 경우
                if (_focus_AutoExpose == 1)
                    focusValueReceiveSetAuto(0);    // 0 : Large, 1 : Small
            } else {
                // Focus가 Large일 경우
                if (_focus_AutoExpose == 0)
                    focusValueReceiveSetAuto(1);    // 0 : Large, 1 : Small
            }
            LogUtil.i("T5HSystem::maControlAuto FocusAutoChange Check mA: " + _ma_AutoExpose + " Focus Auto Change mA: " + SysData.FocusAutoChangeValue.toDouble());
        }


        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_AutoExpose, _kv_AutoExpose, _ma_AutoExpose);

        // 230707 최대 mas 관련 ms 변경추가 hj
        double calmas = (_ma_AutoExpose * _ms_AutoExpose) / 1000;
        double limitms = SysData.MaxMas.toDouble() * 1000 / _ma_AutoExpose;

        if (calmas > SysData.MaxMas.toDouble()) {
            LogUtil.i("T5HSystem::maControlAuto calmas is over ms: " + _ms_AutoExpose);
            _ms_AutoExpose = FindNearestLessValue(_msTbl, limitms);
            msDisplayFilterSendAuto();
            LogUtil.i("T5HSystem::maControlAuto calmas is over near ms: " + _ms_AutoExpose);
        }

        if (_ms_AutoExpose > tablevalue_ms) {
            LogUtil.i("T5HSystem::maControlAuto FindNearstMs mS is over");
            _ms_AutoExpose = FindNearestLessValue(_msTbl, tablevalue_ms);
            // 400 ma 일때 확인필요 1000ms
            msDisplayFilterSendAuto();
            LogUtil.i("T5HSystem::maControlAuto FindNearstMs mS is over Send mS : " + _ms_AutoExpose);
        }
        // Filament Option Filtering(Small 일경우)
        maControlFilamentSmallAuto(_ma_AutoExpose);
        // ma값 Display 소수점 필터링 및 전송
        maDisplayFilterSendAuto();

        ComputeMasAuto();    // mAs Value 변경
        LogUtil.i("T5HSystem::maControlAuto Finish mA : " + _ma_AutoExpose);
        return _ma_AutoExpose;
    }

    // mS Control (AUTO EXPOSE MODE ONLY)
    public static double msControlAuto(boolean up) {
        double table_ms = 0;

        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_ms = 0;
        tablevalue_ms = FindFinalMsValue(_focus_AutoExpose, _kv_AutoExpose, _ma_AutoExpose);

        double limitmSValue_MaxMas = SysData.MaxMas.toDouble() * 1000 / _ma_AutoExpose;
        double limitmsValue_MinMas = SysData.MinMas.toDouble() * 1000 / _ma_AutoExpose;
        double limitmSValue_MaxExposure = SysData.MaxExposureTime.toDouble();
        double limitmSValue_MinExposure = SysData.MinExposureTime.toDouble();
        LogUtil.i("T5HSystem::msControl Cal _ms: " + _ms_AutoExpose + " MAX mAs: " + SysData.MaxMas.toDouble() + " Limit case1: " + limitmSValue_MaxMas + " Limit case2: " + limitmSValue_MaxExposure);

        if (up) {
            if (limitmSValue_MaxMas < ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up)) {
                //LogUtil.i("T5HSystem::msControl Cal _ms: " + _ms_AutoExpose + " MAX mAs: "+ SysData.MaxMas.toDouble() + " Limit case1: "+ limitmSValue_MaxMas + " Limit case2: "+ limitmSValue_MaxExposure);
                return _ms_AutoExpose;
            }
            if (limitmSValue_MaxExposure < ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up)) {
                return _ms_AutoExpose;
            }
            if (ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up) > tablevalue_ms)
                return _ms_AutoExpose;
            else
                _ms_AutoExpose = ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up);
        } else {
            if (limitmSValue_MinExposure > ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up)) {
                LogUtil.i("T5HSystem::msControl ms Min Value : " + limitmSValue_MinExposure + " , now Value : " + _ms);
                return _ms_AutoExpose;
            }
            // 조건문 Test Limit
            if (ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up) < limitmsValue_MinMas)
                return _ms_AutoExpose;
            else
                _ms_AutoExpose = ExposureValueControlFunction(_msTbl, _ms_AutoExpose, up);
        }
        // ms값 Display 소수점 필터링 및 전송
        msDisplayFilterSendAuto();

        ComputeMasAuto();    // mAs Value 변경
        LogUtil.i("T5HSystem::msControl mS : " + _ms_AutoExpose);
        return _ms_AutoExpose;
    }

    // kV Display Filter & Send Display (AUTO EXPOSE MODE ONLY)
    public static void kvDisplayFilterSendAuto() {
        String kvstring = String.format("%.0f", _kv_AutoExpose);
        T5H.getInstance().sendKvValueChangedAuto(kvstring);    // kV Value Display Auto 로 연결
    }

    // mA Display Filter & Send Display (AUTO EXPOSE MODE ONLY)
    public static void maDisplayFilterSendAuto() {
        String mastring;
        if (_ma_AutoExpose == 12.5) {
            mastring = String.format("%.1f", _ma_AutoExpose);
        } else {
            mastring = String.format("%.0f", _ma_AutoExpose);
        }

        T5H.getInstance().sendMaValueChangedAuto(mastring);    // mA Value Display로 연결
    }

    // mS Display Filter & Send Display (AUTO EXPOSE MODE ONLY)
    public static void msDisplayFilterSendAuto() {
        String msstring = "";
        Double calms = 0.0;

        calms = _ms_AutoExpose;

        if (calms >= 16 || calms == 1 || calms == 2 || calms == 4 || calms == 5 || calms == 8 || calms == 10) {
            msstring = String.format("%.0f", calms);
        } else if (calms == 1.25) {
            msstring = String.format("%.2f", calms);
        } else {
            msstring = String.format("%.1f", calms);
        }

        T5H.getInstance().sendMsValueChangedAuto(msstring);    // mS Value Display로 연결
    }

    // mA, mS Control Calculate mAs Value (AUTO EXPOSE MODE ONLY)
    static void ComputeMasAuto() {
        _mas_AutoExpose = _ma_AutoExpose * _ms_AutoExpose / 1000;
        LogUtil.i(TAG, "AutoExpose::ComputeMasAuto : Cal : " + _mas_AutoExpose);
        _mas_AutoExpose = FindNearestValue(_masTbl, _mas_AutoExpose);
        LogUtil.i(TAG, "AutoExpose::ComputeMasAuto : Result : " + _mas_AutoExpose);
    }

    static void ComputeMasScope() {
        _mas_Scope = _ma_Scope * _ms_Scope / 1000;
        LogUtil.i(TAG, "Scope Mode::ComputeMasScope : " + _mas_Scope);
        _mas_Scope = FindNearestValue(_masTbl, _mas_Scope);
    }

    // 절연 내력시험 전용
    public static double kvControlAutoKv(boolean up) {
        if (!T5HSystem._set_AutoKv && !T5HSystem._start_AutoKv) {
            if (up) {
                _kv_target_AutoKv = _kv_target_AutoKv + 30;
            } else {
                _kv_target_AutoKv = _kv_target_AutoKv - 30;
            }

            if (_kv_target_AutoKv <= 150.0) {
                _kv_target_AutoKv = 150.0;
            }
            if (_kv_target_AutoKv >= 180.0) {
                _kv_target_AutoKv = 180.0;
            }

            int targetkvdac = FindFinalKvDACValueTable(_kv_target_AutoKv);

            LogUtil.i("T5HSystem::kvControlAutoKv_kv_AutoKv : " + _kv_target_AutoKv + " DAC : " + targetkvdac);
            kvDisplayFilterSendAutoKv();
            return _kv_target_AutoKv;
        } else {
            return _kv_target_AutoKv;
        }
    }

    // 절연 내력시험 전용
    public static double kvControlAutoKvZero(boolean up) {
        if (!T5HSystem._set_AutoKv && !T5HSystem._start_AutoKv) {
            if (up) {
                _kv_target_AutoKv = _kv_target_AutoKv + 5;
            } else {
                _kv_target_AutoKv = _kv_target_AutoKv - 5;
            }

            if (_kv_target_AutoKv <= 40.0) {
                _kv_target_AutoKv = 40.0;
            }
            if (_kv_target_AutoKv >= 180.0) {
                _kv_target_AutoKv = 180.0;
            }

            int targetkvdac = FindFinalKvDACValueTable(_kv_target_AutoKv);

            LogUtil.i("T5HSystem::kvControlAutoKvZero_kv_AutoKv : " + _kv_target_AutoKv + " DAC : " + targetkvdac);
            kvDisplayFilterSendAutoKv();
            return _kv_target_AutoKv;
        } else {
            return _kv_target_AutoKv;
        }
    }

    // 절연 내력시험 전용
    public static void kvDisplayFilterSendAutoKv() {
        String kvstring = String.format("%.0f", _kv_target_AutoKv);
        T5H.getInstance().sendKvValueChangedAutoKv(kvstring);    // kV Value Display AutoKv 로 연결
    }

    // 절연 내력시험 전용 (사용안함)
    public static void StartAutoKv() {
        T5H.getInstance().sendProgressChangedAutoKv("Start");

        if (_set_AutoKv && !_start_AutoKv) {
            _start_AutoKv = true;
            LogUtil.i("T5HSystem::StartAutoKv CLICK");

            for (double i = _kv_AutoKv; i <= _kv_target_AutoKv; i = i + 10) {
                int kvdac = FindFinalKvDACValueTable(i);
                try {
                    KvValue((int) i, kvdac);
                    LogUtil.i("T5HSystem::StartAutoKv kV: " + i + " DAC : " + kvdac + " i: " + i);
                    Thread.sleep(_stepTime_mS);    // User Input Interval Time(mS)
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
            T5H.getInstance().sendProgressChangedAutoKv("Wait...");

            try {
                Thread.sleep(10000 - _stepTime_mS);        //test 10sec
                //Thread.sleep(180000- _stepTime_mS);	// 180 sec
                kvExposureModeStop(1);
                KvValue((int) 0, 0);
                LogUtil.i("T5HSystem::StartAutoKv Finish kV Value ZERO");
                T5H.getInstance().sendProgressChangedAutoKv("Finish");

            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
            _set_AutoKv = false;
            _start_AutoKv = false;

            LogUtil.i("T5HSystem::StartAutoKv Finish ");
        }

    }

    // 절연 내력시험 전용
    public static void StopAutoKv() {
        _set_AutoKv = false;
        _start_AutoKv = false;
        kvExposureModeStop(1);
    }

    // mAs Control
    public static double masControl(boolean up) {
        // 해당 kV, mA별 최대 mS 값 계산
        double tablevalue_mas = 0;
        tablevalue_mas = FindFinalMasValue();
        //LogUtil.i("T5HSystem::masControl Cal tablevalue_mas : " + tablevalue_mas);
        // 최대 mS 고려하는 부분(MaxExposureTime 과 mS 고려)
        double limitmSValue_MaxExposure = SysData.MaxExposureTime.toDouble();
        double calmasmax_MaxExposure = Math.round((_ma * limitmSValue_MaxExposure) / 1000);    // 반올림 빼는게 더 정확(특정 숫자때문에 일부로 반올림)

        // mAs 보수적 접근 (230707, 추후 촬영범위 늘릴경우 제거)
        double nowmSvalue = _ms;
        double nowmAsvalue = (_ma * nowmSvalue) / 1000;
        double nextmSvalue = ExposureValueControlFunction(_msTbl, nowmSvalue, up);
        double nextmAsvalue = (_ma * nextmSvalue) / 1000;
        double limitmSValue_MinExposure = SysData.MinExposureTime.toDouble();

        LogUtil.i("T5HSystem::masControl 11 Cal mAs: " + ExposureValueControlFunction(_masTbl, _mas, up) + " Limit Max mS Cal: " + calmasmax_MaxExposure);

        if (up) {
            // 최대 mAs 고려(옵션의 MaxMas)
            if (ExposureValueControlFunction(_masTbl, _mas, up) > SysData.MaxMas.toDouble()) {
                LogUtil.i("T5HSystem::masControl Cal mAs: " + _mas + " Limit Max mAs: " + SysData.MaxMas.toDouble());
                return _mas;
            }
            // 최대 mS 고려하는 부분(옵션의 MaxExposureTime 과 mS 고려)
            if (ExposureValueControlFunction(_masTbl, _mas, up) > calmasmax_MaxExposure) {
                LogUtil.i("T5HSystem::masControl Cal mAs: " + ExposureValueControlFunction(_masTbl, _mas, up) + " Limit Max mS Cal: " + calmasmax_MaxExposure);
                return _mas;
            }
            // mA랑 sec값이 설정한 최대 mAS보다 넘어가게될경우 mAs 변경금지한다(230707, ex 최대630mAs 40kV,160mA,4sec일때 계산상으로 640mAs 방지)
            if (nextmAsvalue > SysData.MaxMas.toDouble()) {
                LogUtil.i("T5HSystem::masControl mSChange now mAs: " + nowmAsvalue + " next mAs: " + nextmAsvalue + " now Display mAs: " + _mas);
                return _mas;
            }
            if (ExposureValueControlFunction(_masTbl, _mas, up) > tablevalue_mas)
                return _mas;
            else
                _mas = ExposureValueControlFunction(_masTbl, _mas, up);
        } else {
            // 조건문 Test Limit
            // 최소 mAs 고려(옵션의 MinMas)
            if (ExposureValueControlFunction(_masTbl, _mas, up) < SysData.MinMas.toDouble()) {
                LogUtil.i("T5HSystem::masControl Cal mAs: " + _mas + " Limit Min mAs: " + SysData.MinMas.toDouble());
                return _mas;
            }

            if (_ms <= limitmSValue_MinExposure)
                return _mas;
            else
                _mas = ExposureValueControlFunction(_masTbl, _mas, up);
        }

        masDisplayFilterSend();                // mAs Value Display로 연결

        ComputeMs();    // mS Value 변경
        LogUtil.i("T5HSystem::masControl mAs Final: " + _mas);
        return _mas;
    }

    // mAs Display Filter & Send Display
    public static void masDisplayFilterSend() {
        String masstring;

        if (_mas == 0.1 || _mas == 0.2 || _mas == 0.4 || _mas == 0.5 || _mas == 0.8 || _mas == 1.6 || _mas == 2.5 || _mas == 3.2 || _mas == 6.4 || _mas == 12.5) {
            masstring = String.format("%.1f", _mas);
        } else if (_mas == 0.12 || _mas == 0.16 || _mas == 0.25 || _mas == 0.32 || _mas == 0.64 || _mas == 1.25) {
            masstring = String.format("%.2f", _mas);
        } else {
            masstring = String.format("%.0f", _mas);
        }

        T5H.getInstance().sendMasValueChanged(masstring);    // mAs Value Display로 연결
    }

    // mA, mS, mAs Table Control Function
    public static double ExposureValueControlFunction(double[] table, double value, boolean up) {
        if (table == null || table.length == 0)
            return 0;
        for (int i = 0; i < table.length; i++) {
            double d = table[i];
            if (d < value) {
                continue;
            }
            if (value == d) {
                if (up) {
                    if ((i + 1) == table.length)
                        return table[i];
                    else
                        return table[i + 1];
                } else {
                    if ((i - 1) < 0)
                        return table[0];
                    else
                        return table[i - 1];
                }
            }
        }
        return table[table.length - 1];
    }

    // mA, mS Control Calculate mAs Value
    static void ComputeMasInit() {
        _mas = _ma * _ms / 1000;
        _mas = FindNearestValue(_masTbl, _mas);
        if (_mas > SysData.MaxMas.toDouble()) {
            _mas = SysData.MaxMas.toDouble();
            LogUtil.i("T5HSystem::ComputeMas Cal _mas: " + _mas + " LiMIT MAXMas: " + SysData.MaxMas.toDouble());
        }
        _ms = _mas / _ma * 1000;
        _ms = FindNearestValue(_msTbl, _ms);

        //				msDisplayFilterSend();
        //				masDisplayFilterSend();
        // 20240105 tw MainThread에서 실행되어야 할 코드가 SubThread에서 실행됨
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                msDisplayFilterSend();
                masDisplayFilterSend();
            }
        });
        EluiSystem.eluiEqualsExamData();
    }

    // mA, mS Control Calculate mAs Value
    public static void ComputeMas() {
        _mas = _ma * _ms / 1000;
        _mas = FindNearestValue(_masTbl, _mas);
        LogUtil.i(TAG, "CompueMas Val : " + _mas);
        if (_mas > SysData.MaxMas.toDouble()) {
            LogUtil.i("T5HSystem::ComputeMas Cal _mas: " + _mas + " LiMIT MAXMas: " + SysData.MaxMas.toDouble());
            return;
        }
        masDisplayFilterSend();
        EluiSystem.eluiEqualsExamData();
    }

    // mAs Control Calculate mS Value
    static void ComputeMs() {
        _ms = _mas / _ma * 1000;
        _ms = FindNearestValue(_msTbl, _ms);

        msDisplayFilterSend();
    }

    // System내부 조사조건 Table 에서 근처값 가져오는 함수(상단부분 선언)
    public static double FindNearestValue(double[] table, double value) {
        if (table == null || table.length == 0)
            return 0;
        for (int i = 0; i < table.length; i++) {
            double d = table[i];
            if (d < value)
                continue;

            if (value == d || i == 0)
                return table[i];
            else {
                double delta1 = value - table[i - 1];
                double delta2 = d - value;
                if (delta1 <= delta2)
                    return table[i - 1];
                else
                    return table[i];
            }
        }
        return table[table.length - 1];
    }

    // System내부 조사조건 Table 에서 근처값 중 작은값 가져오는 함수(상단부분 선언)
    public static double FindNearestLessValue(double[] table, double value) {
        if (table == null || table.length == 0)
            return 0;
        for (int i = 0; i < table.length; i++) {
            double d = table[i];
            if (d < value)
                continue;

            if (value == d || i == 0)
                return table[i];
            else {
                double delta1 = value - table[i - 1];
                double delta2 = d - value;
                if (delta1 <= delta2)
                    return table[i - 1];
                else
                    return table[i - 1];
            }
        }
        return table[table.length - 1];
    }

    // System내부 조사조건 Table 에서 근처값 중 무조건  가져오는 함수(상단부분 선언)
    public static double FindNearestNotEqualLessValue(double[] table, double value) {
        if (table == null || table.length == 0)
            return 0;
        for (int i = 0; i < table.length; i++) {
            double d = table[i];
            if (d < value)
                continue;

            if (i == 0)
                return table[i];
            if (value == d && i != 0)
                return table[i - 1];
            else {
                double delta1 = value - table[i - 1];
                double delta2 = d - value;
                if (delta1 <= delta2)
                    return table[i - 1];
                else
                    return table[i - 1];
            }
        }
        return table[table.length - 1];
    }

    // System내부 조사조건 Table 에서 근처값보다 하나 큰 값 함수(상단부분 선언)test
    public static double FindNearestNotEqualLessValueTest(double[] table, double value) {
        if (table == null || table.length == 0)
            return 0;
        for (int i = 0; i < table.length; i++) {
            double d = table[i];
            if (d < value)
                continue;

            if (i == 0)
                return table[i];
            if (d >= value) {
                if (i == (table.length - 1)) return table[table.length - 1];
                else return table[i + 1];
            }
        }
        return table[table.length - 1];
    }

    public static int densityStepContol(boolean up) {
        if (up) {
            if (_densityStep < 5)
                _densityStep++;
        } else {
            if (_densityStep > -5)
                _densityStep--;
        }
        // Density Display 및 전송
        String densitystring = Integer.toString(_densityStep);
        T5H.getInstance().sendDensityValueChanged(densitystring);// Density Value Display로 연결
        LogUtil.i("T5HSystem::densityStepContol Step value : " + _densityStep);
        return _densityStep;
    }

    public static int densityStepContolCaliAEC(boolean up) {
        if (up) {
            if (_densityStep_CaliAEC < 5)
                _densityStep_CaliAEC++;
        } else {
            if (_densityStep_CaliAEC > -5)
                _densityStep_CaliAEC--;
        }
        // Density Display 및 전송
        String densitystring = Integer.toString(_densityStep_CaliAEC);
        T5H.getInstance().senddAECCaliDensityValueChanged(densitystring);// Density Value Display로 연결
        LogUtil.i("T5HSystem::densityStepContolCaliAEC Step value : " + _densityStep_CaliAEC);
        return _densityStep_CaliAEC;
    }

    public static void ExposeOn() {
        LogUtil.i("##Expose On");
    }

    public static void ExposeOff() {
        LogUtil.i("##Expose Off");
    }

    public static byte[] ConvertIntToByteArray(int databyte, int data) {
        int shiftvalue = databyte - 1;
        if (shiftvalue < 0) {
            shiftvalue = 0;
        }
        byte[] bydata = new byte[databyte + 1];
        for (int i = 0; i < databyte; i++) {
            bydata[i] = (byte) (data >> ((shiftvalue - i) * 8));
            //LogUtil.i(String.format("SetSerialPort, ConvertIntToByteArray [" + i + "] : "+"%02X ", bydata[i]));
        }
        return bydata;
    }

    // Initial Start 신호 : 보낸 후 15초내로 Initial에 필요한 값들 전송해야된다.
    public static void OnDeviceInit() {
        int data = 0;
        LogUtil.i(String.format("T5HSystem::SetSerialPort, OnInitTest value : " + data));
        byte[] init = ConvertIntToByteArray(0, data);
        setSerialPort.SerialSend(0, ControlCommandT5H.COMM_STATUS_INFO, ActionCommandT5H.INITIAL_REQ, init);
    }

    // Board로 Android Board Time 전달
    public static void OpTimeSync() {
        long nowtime = System.currentTimeMillis();                //Mili Sec값 가지고오기
        long nowtimesec = System.currentTimeMillis() / 1000;    //Sec값 가지고오기

        Date date = new Date(nowtime);
        SimpleDateFormat dateFormatYear = new SimpleDateFormat("yyyy");
        SimpleDateFormat dateFormatMon = new SimpleDateFormat("MM");
        SimpleDateFormat dateFormatDay = new SimpleDateFormat("dd");
        SimpleDateFormat dateFormatHour = new SimpleDateFormat("HH");
        SimpleDateFormat dateFormatMin = new SimpleDateFormat("mm");
        SimpleDateFormat dateFormatSec = new SimpleDateFormat("ss");
        int getYear = Integer.parseInt(dateFormatYear.format(date));
        int getMon = Integer.parseInt(dateFormatMon.format(date));
        int getDay = Integer.parseInt(dateFormatDay.format(date));
        int getHour = Integer.parseInt(dateFormatHour.format(date));
        int getMin = Integer.parseInt(dateFormatMin.format(date));
        int getSec = Integer.parseInt(dateFormatSec.format(date));
        //LogUtil.i(String.format("T5HSystem::OpTimeSync nowtimesec : "+nowtimesec));

        LogUtil.i(String.format("T5HSystem::OpTimeSync : " + getYear + "-" + getMon + "-" + getDay + " " + getHour + ":" + getMin + ":" + getSec));
        byte[] byteYear = ConvertIntToByteArray(2, getYear);
        byte[] byteMon = ConvertIntToByteArray(1, getMon);
        byte[] byteDay = ConvertIntToByteArray(1, getDay);
        byte[] byteHour = ConvertIntToByteArray(1, getHour);
        byte[] byteMin = ConvertIntToByteArray(1, getMin);
        byte[] byteSec = ConvertIntToByteArray(1, getSec);
        byte[] bytevalue = new byte[7];
        System.arraycopy(byteYear, 0, bytevalue, 0, 2);
        System.arraycopy(byteMon, 0, bytevalue, 2, 1);
        System.arraycopy(byteDay, 0, bytevalue, 3, 1);
        System.arraycopy(byteHour, 0, bytevalue, 4, 1);
        System.arraycopy(byteMin, 0, bytevalue, 5, 1);
        System.arraycopy(byteSec, 0, bytevalue, 6, 1);
        setSerialPort.SerialSend(7, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.OP_TIME_SYNC, bytevalue);
    }

    public static void InitTimeMin() {
        int value = SysData.MinExposureTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitTimeMin value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TIME_MIN, bytevalue);
    }

    // 10000ms 이하 (Exposure Time)
    public static void InitTimeMax() {
        int value = SysData.MaxExposureTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitTimeMax value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TIME_MAX, bytevalue);
    }

    // Unit(A), Datasheet에 따름  ex) 3.5A -> 350(DEC)
    public static void InitRotorStartingCurrentMin() {
        double val = Math.round((Math.ceil(SysData.RotorStartingCurrentMinLow.toDouble() * 100) / 100.0) * 100);
        LogUtil.i(String.format("T5HSystem::InitRotorStartingCurrentMin value : " + val));
        byte[] bytevalue = ConvertIntToByteArray(2, (int) val);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_STARTING_CURRENT_MIN, bytevalue);
    }

    // Unit(A), Datasheet에 따름  ex) 7A -> 700(DEC)
    public static void InitRotorStartingCurrentMax() {
        double val = Math.round((Math.ceil(SysData.RotorStartingCurrentMaxLow.toDouble() * 100) / 100.0) * 100);
        LogUtil.i(String.format("T5HSystem::InitRotorStartingCurrentMax value : " + (int) val + " , " + (Math.ceil(SysData.RotorStartingCurrentMaxLow.toDouble() * 100) / 100.0)));
        byte[] bytevalue = ConvertIntToByteArray(2, (int) val);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_STARTING_CURRENT_MAX, bytevalue);
    }

    // Unit(ms), Datasheet에 따름
    public static void InitRotorStartingTime() {
        int value = SysData.RotorStartingTimeLow.toInteger();
        LogUtil.i(String.format("T5HSystem::InitRotorStartingTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_STARTING_TIME, bytevalue);
    }

    //Unit(A), Datasheet에 따름  ex) 1.2A -> 120(DEC)
    public static void InitRotorRunningCurrentMin() {
        double val = Math.round((Math.ceil(SysData.RotorRunningCurrentMinLow.toDouble() * 100) / 100.0) * 100);
        LogUtil.i(String.format("T5HSystem::InitRotorRunningCurrentMin value : " + (int) val));
        byte[] bytevalue = ConvertIntToByteArray(2, (int) val);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_RUNNING_CURRENT_MIN, bytevalue);
    }

    // Unit(A), Datasheet에 따름  ex) 2.4A -> 240(DEC)
    public static void InitRotorRunningCurrentMax() {
        double val = Math.round((Math.ceil(SysData.RotorRunningCurrentMaxLow.toDouble() * 100) / 100.0) * 100);
        LogUtil.i(String.format("T5HSystem::InitRotorRunningCurrentMax value : " + (int) val));
        byte[] bytevalue = ConvertIntToByteArray(2, (int) val);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_RUNNING_CURRENT_MAX, bytevalue);
    }

    // Unit(ms), 10000 ~ 20000
    public static void InitRotorRunningTime() {
        int value = SysData.RotorRunningTimeLow.toInteger();
        LogUtil.i(String.format("T5HSystem::InitRotorRunningTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_RUNNING_TIME, bytevalue);
    }

    // Unit(ms), 100 ~ 2000
    public static void InitBuckyDelayTime() {
        int value = SysData.BuckyDelayTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBuckyDelayTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BUCKY_DELAY_TIME, bytevalue);
    }

    // 0:None, 1:DR, 2:cassette
    public static void InitBucky1Type() {
        int value = SysData.Bucky1_Type.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBucky1Type value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BUKCY_1_TYPE, bytevalue);
    }

    // 0:None, 1:Motor, 2:Solenoid
    public static void InitBucky1GridType() {
        int value = SysData.Bucky1_GridType.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBucky1GridType value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BUCKY_1_GRID_TYPE, bytevalue);
    }

    // 0:None, 1:DR, 2:cassette
    public static void InitBucky2Type() {
        int value = SysData.Bucky2_Type.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBucky2Type value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BUKCY_2_TYPE, bytevalue);
    }

    // 0:None, 1:Motor, 2:Solenoid
    public static void InitBucky2GridType() {
        int value = SysData.Bucky2_GridType.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBucky2GridType value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BUCKY_2_GRID_TYPE, bytevalue);
    }

    // Unit(ms), 100 ~ 2000
    public static void InitTDrResposeTime() {
        int value = SysData.TDRResponseTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitTDrResposeTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.T_DR_RESPONSE_TIME, bytevalue);
    }

    // 0:Disable, 1:Enable
    public static void InitIniterLock() {
        int value = SysData.InterLock.toInteger();
        LogUtil.i(String.format("T5HSystem::InitIniterLock value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.INTERLOCK_CONFIG, bytevalue);
    }

    // 0:Disable, 1:Enable
    public static void InitDoorLock() {
        int value = SysData.DoorLock.toInteger();
        LogUtil.i(String.format("T5HSystem::InitDoorLock value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.DOORLOCK_CONFIG, bytevalue);
    }

    // 0:Disable, 1:Enable
    public static void InitExternallock() {
        int value = SysData.ExternallLock.toInteger();
        LogUtil.i(String.format("T5HSystem::InitExternallock value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.EXTLOCK_CONFIG, bytevalue);
    }

    // Unit(Sec), 1 ~ 100
    public static void InitCapbankChargeTime() {
        int value = SysData.CapChargeTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitCapbankChargeTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.CAPBANK_CHARGE_TIME, bytevalue);
    }

    // Unit(Sec), 1 ~ 100
    public static void InitCapbankChargeTimeOut() {
        int value = SysData.CapChargeTimeOut.toInteger();
        LogUtil.i(String.format("T5HSystem::InitCapbankChargeTimeOut value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.CAPBANK_CHARGE_TIMEOUT, bytevalue);
    }

    // Unit(V), 50 ~ capLevelMax
    public static void InitCapbankLevelMin() {
        int value = SysData.CapLevelMin.toInteger();
        LogUtil.i(String.format("T5HSystem::InitCapbankLevelMin value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.CAPBANK_LEVEL_MIN, bytevalue);
    }

    // Unit(V), capLevelMin ~ 400
    public static void InitCapbankLevelMax() {
        int value = SysData.CapLevelMax.toInteger();
        LogUtil.i(String.format("T5HSystem::InitCapbankLevelMax value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.CAPBANK_LEVEL_MAX, bytevalue);
    }

    // Unit(A), Tube Datasheet에 따름
    // Standby Current -10% ( ex) 2.1A -> 210(DEC))
    public static void InitFilamentMin() {
        double value = SysData.FilamentMin.toDouble() * 100;
        int lastvalue = (int) Math.round(value);
        LogUtil.i(String.format("T5HSystem::InitFilamentMin value : " + lastvalue));
        byte[] bytevalue = ConvertIntToByteArray(2, lastvalue);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FILAMENT_MIN, bytevalue);
    }

    // Unit(A), 사용자 설정(절연내력시험 사용 가능)
    // Standby Current -10% ( ex) 2.1A -> 210(DEC))
    public static void FilamentMin(double value) {
        double calvalue = value * 100;
        int lastvalue = (int) Math.round(calvalue);
        LogUtil.i(String.format("T5HSystem::FilamentMin value : " + lastvalue));
        byte[] bytevalue = ConvertIntToByteArray(2, lastvalue);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FILAMENT_MIN, bytevalue);
    }

    // Unit(A), Tube Datasheet에 따름
    // Filament Max Current ( ex) 5.5A -> 550(DEC))
    public static void InitFilamentMax() {
        double value = SysData.FilamentMax.toDouble() * 100;
        int lastvalue = (int) value;
        LogUtil.i(String.format("T5HSystem::InitFilamentMax value : " + lastvalue));
        byte[] bytevalue = ConvertIntToByteArray(2, lastvalue);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FILAMENT_MAX, bytevalue);
    }

    public static void OverMaRef(int value, int overmadac) {
        // Over mA value(2byte, 10mA~500mA),
        // DAC Value(2 byte, 0~4095)
        byte[] byteOverMaValue = ConvertIntToByteArray(2, value);
        byte[] byteDacValue = ConvertIntToByteArray(2, overmadac);
        byte[] bytevalue = new byte[4];
        System.arraycopy(byteOverMaValue, 0, bytevalue, 0, 2);
        System.arraycopy(byteDacValue, 0, bytevalue, 2, 2);

        LogUtil.i(String.format("T5HSystem::OverMaRef value : " + value));
        setSerialPort.SerialSend(4, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.OVER_MA_REF, bytevalue);
    }

    public static void OverKvRef(int value, int overkvdac) {
        // Over kV value(1byte, 40kV~150kV,
        // DAC Value(2 byte, 0~4095)
        byte[] byteKvValue = ConvertIntToByteArray(1, value);
        byte[] byteDacValue = ConvertIntToByteArray(2, overkvdac);
        byte[] bytevalue = new byte[3];
        System.arraycopy(byteKvValue, 0, bytevalue, 0, 1);
        System.arraycopy(byteDacValue, 0, bytevalue, 1, 2);

        LogUtil.i(String.format("T5HSystem::OverKvRef value : " + value));
        setSerialPort.SerialSend(3, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.OVER_KV_REF, bytevalue);
    }

    // Unit(ms) 1 ~ 10000
    public static void InitAECBackupTime() {
        int value = (int) SysData.AECBackupTime.toFloat();
        LogUtil.i(String.format("T5HSystem::InitAECBackup value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AEC_BACKUP_TIME, bytevalue);
    }

    // Unit(ms) 1 ~ 10000
    public static void InitFootSwitchDelayTime() {
        int value = SysData.FootSwitchDelayTime.toInteger() * 1000; // sec to ms
        //int value = SysData.FootSwitchDelayTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitFootSwitchDelayTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FOOT_SWITCH_DELAY_TIME, bytevalue);
    }

    // DAC Value(2Byte 0~4095) : Default Value
    public static void InitFocusSmallCurrentStandBy() {
        double db;
        final boolean ampereMod = opMgr.getFilamentStandbyCurrentAdjAmpereIs();
        int value;

        if (ampereMod) {
            db = SysData.focusSmallCurrStdbyAmpere.toDouble();
            value = (int) Math.round(db * 100);
        } else {
            db = SysData.FocusSmallCurrentStandby.toDouble();
            value = (int) db;
        }

        LogUtil.i(String.format("T5HSystem::InitFocusSmallCurrentStandBy value : " + value));
        int actDatLen = ampereMod ? 3 : 2;
        byte[] bytevalue = ConvertIntToByteArray(actDatLen, value);
        setSerialPort.SerialSend(actDatLen, ControlCommandT5H.COMM_CONTROL
                , ActionCommandT5H.TUBE_FOCUS_SMALL_CURRENT_STANDBY, bytevalue);
    }

    // DAC Value(2Byte 0~4095) : Default Value
    public static void InitFocusLargeCurrentStandBy() {
        double db;
        final boolean ampereMod = opMgr.getFilamentStandbyCurrentAdjAmpereIs();
        int value;

        if (ampereMod) {
            db = SysData.focusLargeCurrStdbyAmpere.toDouble();
            value = (int) Math.round(db * 100);
        } else {
            db = SysData.FocusLargeCurrentStandby.toDouble();
            value = (int) db;
        }

        LogUtil.i(String.format("T5HSystem::InitFocusLargeCurrentStandBy value : " + value));
        int actDatLen = ampereMod ? 3 : 2;
        byte[] bytevalue = ConvertIntToByteArray(actDatLen, value);
        setSerialPort.SerialSend(actDatLen, ControlCommandT5H.COMM_CONTROL
                , ActionCommandT5H.TUBE_FOCUS_LARGE_CURRENT_STANDBY, bytevalue);
    }

    // Unit(ms), 100 ~ 500
    public static void InitFilamentBoostTime() {
        int value = SysData.FilamentBoostTime.toInteger();
        LogUtil.i(String.format("T5HSystem::InitFilamentBoostTime value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FILAMENT_BOOST_TIME, bytevalue);
    }

    // 0:Disable, 1:Enable
    public static void InitBK1FB() {
        int value = SysData.Bucky1_FeedBack.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBK1FB value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BK1_FB, bytevalue);
    }

    // 0:Disable, 1:Enable
    public static void InitBK2FB() {
        int value = SysData.Bucky2_FeedBack.toInteger();
        LogUtil.i(String.format("T5HSystem::InitBK2FB value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BK2_FB, bytevalue);
    }

    // Unit : 50~99 (E7239 : 85, RAD-14 : 79)
    public static void InitRotorPhaseOffsetValue() {
        // Tube 명에 따른 임의값 전환
        int value = SysData.RotorComCurrentRateLow.toInteger();
        LogUtil.i(String.format("T5HSystem::InitRotorPhaseOffsetValue value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_PHASE_OFFSET_VALUE, bytevalue);
    }

    // Value(2Byte 90~220) : Default Value
    public static void Init60kVCalValue() {
        int value = SysData.Kv_60Cal_Value.toInteger();
        LogUtil.i(String.format("T5HSystem::Init60kVCalValue value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.KV_60CAL_VALUE, bytevalue);
    }

    // Value(2Byte 90~220) : Default Value
    public static void Init120kVCalValue() {
        int value = SysData.Kv_120Cal_Value.toInteger();
        LogUtil.i(String.format("T5HSystem::Init120kVCalValue value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.KV_120CAL_VALUE, bytevalue);
    }

    public static void InitmaCalValue() {
        int val1 = SysData.mA_point1_Value.toInteger();
        int val2 = SysData.mA_point2_Value.toInteger();
        int val3 = SysData.mA_point3_Value.toInteger();
        int val4 = SysData.mA_point4_Value.toInteger();

        byte[] byteval0 = ConvertIntToByteArray(1, 0);
        byte[] byteval1 = ConvertIntToByteArray(2, val1);
        byte[] byteval2 = ConvertIntToByteArray(2, val2);
        byte[] byteval3 = ConvertIntToByteArray(2, val3);
        byte[] byteval4 = ConvertIntToByteArray(2, val4);
        byte[] byteValue = new byte[9];
        System.arraycopy(byteval0, 0, byteValue, 0, 1);
        System.arraycopy(byteval1, 0, byteValue, 1, 2);
        System.arraycopy(byteval2, 0, byteValue, 3, 2);
        System.arraycopy(byteval3, 0, byteValue, 5, 2);
        System.arraycopy(byteval4, 0, byteValue, 7, 2);
        LogUtil.i(String.format("T5HSystem::InitmaCalValue value : " + Arrays.toString(byteValue)) + " point 1: " + val1
                + " point 2: " + val2 + " point 3 : " + val3 + " point 4 : " + val4);
        setSerialPort.SerialSend(9, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.MA_CAL_VALUE, byteValue);
    }

    public static void InitmASingleFaultRatio() {
        int value = SysData.mASingleFault.toInteger();
        LogUtil.i(String.format("T5HSystem::mASingleFaultRatioInit : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.MA_SINGLE_FAULT_RATIO, bytevalue);
    }

    public static void checkFocusCurrentStandBy() {
        setSerialPort.SerialSend(ControlCommandT5H.COMM_GET_INFO
                , ActionCommandT5H.TUBE_FOCUS_SMALL_CURRENT_STANDBY, null
                , (ctrlCmd, actCmd, actDat, timeout, ack, sid) -> {
                    //operationManager.markStatus(ctrlCmd + " " + actCmd + " " + Arrays.toString(actDat));
                    boolean ena = true;

                    if (!timeout && (ack == 0) && (actDat != null)) {
                        if (actDat.length == 2) {
                            ena = false; // legacy mode
                        }
                    } else {
                        operationManager.markError("timeout: " + timeout + ", ack: " + ack);
                    }

                    opMgr.setFilamentStandbyCurrentAdjAmpereIs(ena);
                    return true;
                });
    }

    public static void getFilamentManageInfo() {
        final byte calcInfo = 0;
        final byte[] dat = {calcInfo};

        setSerialPort.SerialSend(ControlCommandT5H.COMM_GET_INFO
                , ActionCommandT5H.FILAMENT_GET_MANAGE, dat
                , (ctrlCmd, actCmd, actDat, timeout, ack, sid) -> {
                    //operationManager.markStatus(ctrlCmd + " " + actCmd + " " + operationManager.byteArrayToHex(actDat));

                    if (!timeout && (ack == 0) && (actDat != null)) {
                        if (!opMgr.setFilamentManageInfo(actDat)) {
                            operationManager.markError("!opMgr.setFilamentManageInfo(actDat)");
                        }
                    } else {
                        operationManager.markError("timeout: " + timeout + ", ack: " + ack);
                    }

                    return true;
                });
    }

    public static void getGenerateIdentify() {
        setSerialPort.SerialSend(ControlCommandT5H.COMM_GET_INFO
                , ActionCommandT5H.T_GENERATOR_ID, null
                , (ctrlCmd, actCmd, actDat, timeout, ack, sid) -> {
                    //operationManager.markStatus(ctrlCmd + " " + actCmd + " " + operationManager.byteArrayToHex(actDat));

                    if (!timeout && (ack == 0) && (actDat != null)) {
                        if (!opMgr.setGeneratorID(actDat)) {
                            operationManager.markError("!opMgr.setGeneratorID(actDat)");
                        }
                    } else {
                        operationManager.markError("timeout: " + timeout + ", ack: " + ack);
                    }

                    return true;
                });
    }

    // 3상 관련 Init 시 패킷 전송
    public static void InitInputSourcePhase() {
        int value = SysData.InputPower.toInteger();
        LogUtil.i(String.format("T5HSystem::InputSourcePhase : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.INPUT_SOURCE_PHASE, bytevalue);
    }

    public static void InitmAAllowValue() {
        int value = SysData.MaAllowValue.toInteger();
        LogUtil.i(String.format("T5HSystem::InitmAAllowValue value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.OVER_MA_ALLOW_VALUE, bytevalue);
    }

    public static void InitAECErrorTime() {
        int value = SysData.AEC_ERROR_TIME.toInteger();
        LogUtil.i(String.format("T5HSystem::AEC_ERROR_TIME value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AEC_ERROR_TIME, bytevalue);
    }

    public static void InitMACalValue(Context context) {
        int value = SysData.AEC_ERROR_TIME.toInteger();
        LogUtil.i(String.format("T5HSystem::AEC_ERROR_TIME value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AEC_ERROR_TIME, bytevalue);
    }

    // add focus change times methods here

    public static void InitFocusChangeTime() {
        int setValue = SysData.TubeFocusChangeTime.toInteger() * 1000;
        LogUtil.i(String.format("T5HSystem::TubeFocusChangeTime value : " + setValue));
        byte[] byteValue = ConvertIntToByteArray(2, setValue);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FOCUS_CHANGE_TIME, byteValue);
    }

    public static void InitFocusPrepareTime() {
        int setValue = (int) (SysData.TubeFocusPrepareTime.toDouble() * 1000);
        LogUtil.i(String.format("T5HSystem::TubeFocusPrepareTime value : " + setValue));
        byte[] byteValue = ConvertIntToByteArray(2, setValue);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FOCUS_PREPARE_TIME, byteValue);
    }

    public static void InitFilamentPrepareTime() {
        int setValue = SysData.TubeFocusFilamentPrepareTime.toInteger();
        LogUtil.i(String.format("T5HSystem::TubeFocusFilamentPrepareTime value : " + setValue));
        byte[] byteValue = ConvertIntToByteArray(2, setValue);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FILAMENT_PREPARE_TIME, byteValue);
    }

    /// ----- NEW INIT END -----

    // Command Done ADD
    public static void CommandDone(int value) {
        LogUtil.i(String.format("T5HSystem::CommandDone value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.COMMAND_DONE, bytevalue);
    }

    public static void MaMaxRating(int value) {
        LogUtil.i(String.format("T5HSystem::MaMaxRating value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.MA_MAX_RATING, bytevalue);
    }

    public static void FocusSmallCurrentBoostValue(int value) {
        LogUtil.i(String.format("T5HSystem::FocusSmallCurrentBoost value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        //LogUtil.i(String.format("SetSerialPort, InitFocusSmallCurrentBoost [0] : "+"%02X ", bytevalue[0]));
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TUBE_FOCUS_SMALL_CURRENT_BOOST, bytevalue);
    }

    // ma DAC X %
    public static void FocusLargeCurrentBoostValue(int value) {
        LogUtil.i(String.format("T5HSystem::FocusLargeCurrentBoost value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        //LogUtil.i(String.format("SetSerialPort InitFocusLargeCurrentBoost [0] : "+"%02X ", bytevalue[0]));
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TUBE_FOCUS_LARGE_CURRENT_BOOST, bytevalue);
    }

    // 0:Disable, 1:Enable
    public static void RotorContinuoisMode(int value) {
        //int value = SysData.RotorContinuousMode.toInteger();
        LogUtil.i(String.format("T5HSystem::RotorContinuoisMode value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ROTOR_CONTINUOUS_MODE, bytevalue);
    }

    //0 : Manual, 1:AEC 2: Manual_Continuous
    public static void ModeChange(int value) {
        LogUtil.i(String.format("T5HSystem::ModeChange value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.MODE, bytevalue);
        EluiSystem.sendEluiBuckyData();
    }

    public static void SendSystemStatus(int value) {
        LogUtil.i(String.format("T5HSystem::SendSystemStatus value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.SYSTEM_STATUS, bytevalue);
    }

    // 0: Power 3.3v, 1: Power 5v, 2: Power +12v, 3: Power -12v, 4: Frequency, 5: dcLink voltage, 6: Rotor current, 7: filament current
    public static void PowerDiagnosis(int value) {
        LogUtil.i(String.format("T5HSystem::PowerDiagnosis value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.POWER_DIAGNOSIS, bytevalue);
    }

    public static void BoardVersionCheck(int value) {
        LogUtil.i(String.format("T5HSystem::BoardVersionCheck value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_GET_INFO, ActionCommandT5H.T_BOARD_VERSION, bytevalue);
    }

    public static void ErrorDelete() {
        int value = 1;
        LogUtil.i(String.format("T5HSystem::ErrorDelete value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.ERROR_DELETE, bytevalue);
    }

    public static void WarningDelete() {
        int value = 1;
        LogUtil.i(String.format("T5HSystem::WarningDelete value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.WARNING_DELETE, bytevalue);
    }

    // Scope Mode 1 : on/off 2 : Type
    public static void ScopeMode(int OnValue, int TypeValue) {
        byte[] bytevalue1 = ConvertIntToByteArray(1, OnValue);
        byte[] bytevalue2 = ConvertIntToByteArray(1, TypeValue);
        byte[] bytevalue = new byte[2];
        System.arraycopy(bytevalue1, 0, bytevalue, 0, 1);
        System.arraycopy(bytevalue2, 0, bytevalue, 1, 1);
        LogUtil.i(String.format("T5HSystem::ScopeMode Select : " + OnValue + " , " + TypeValue));
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FB_SCOPE, bytevalue);
    }

    //Scope Data 구간 별 전송 ::: Ready를 보내여야만 F/W에서 데이터를 전송해줌
    //control(1byte) 1: Ready, 2: Display Done, 3: Retry (데이터 재전송)
    //count(2byte) 0 ~ 10000 ,한번에 보내는 데이터 개수 ,0이면 디폴트에 10개 보냄
    public static void ScopeModeStatus(int value, int count) {
        byte[] bytevalue1 = ConvertIntToByteArray(1, value);
        byte[] bytevalue2 = ConvertIntToByteArray(2, count);
        byte[] bytevalue = new byte[3];
        System.arraycopy(bytevalue1, 0, bytevalue, 0, 1);
        System.arraycopy(bytevalue2, 0, bytevalue, 1, 2);
        LogUtil.i(String.format("T5HSystem::ScopeModeStatus Control, Count : " + value + " , " + count));
        setSerialPort.SerialSend(3, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FB_SCOPE_DATA_STATUS, bytevalue);

    }

    // Ready Shoot 물리 버튼 거부 패킷
    // 0 : 허용 1 : 금지
    // 물리적으로 Ready Shoot 버튼을 눌렀을 시 버튼기능을 허용할지 금지할지
    // Error Clear, Stop, Close, 시 처리
    public static void PhysicalSwitchAllow(int value) {
        LogUtil.i(String.format("T5HSystem::Physical SwitchAllow Value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.T_PHY_SWITCH_REJECT, bytevalue);
    }

    // 제너레이터에 Warning Error 로그 요청
    // 0: pop , 1: Retry
    public static void GeneratorLogRequest(int value) {
        LogUtil.i(String.format("T5HSystem::GeneratorLogRequest Value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.GEN_LOG_POP, bytevalue);
    }

    // 현재 화면에 따라 상태 값을 전송
    // 0 = normal , 1 = kV Calibration , 2 = mA Calibration(Manual) , 3 = mA Calibration(Auto)
    // 4 = AEC Calibration , 5 = AutoExpsoure , 6 = kV Exposure , 7 = Power Diagnosis , 8 = Virtual OsilloScope
    public static void SendStatusActivity(int value) {
        LogUtil.i(String.format("T5HSystem:: Activity Status Value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.T_OPCON_STATUS, bytevalue);
    }

    // 단일 조사 통신을 못 받았을 시 전송하는 패킷
    // Data 는 null 로 포함하여 전송.
    // 송신 시 마지막 조사조건의 kV,mA,Time 피드백 값이 F/W에서 재전송 됨.
    public static void SendFeedBackRequest() {
        try {
            LogUtil.i("T5HSystem:: SendFeedBackRequest");
            byte[] bytevalue = ConvertIntToByteArray(0, 0);
            setSerialPort.SerialSend(0, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FEEDBACK_REQUEST, bytevalue);
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }


    public static void KvValue(int value, int kvdacvalue) {
        // kV value(1byte, 40kV~150kV, 설정된 kV의 min/max에 의해 제한),
        // DAC Value(2 byte, 0~4095)
        byte[] byteKvValue = ConvertIntToByteArray(1, value);
        byte[] byteDacValue = ConvertIntToByteArray(2, kvdacvalue);
        byte[] bytevalue = new byte[3];
        System.arraycopy(byteKvValue, 0, bytevalue, 0, 1);
        System.arraycopy(byteDacValue, 0, bytevalue, 1, 2);

        LogUtil.i(String.format("T5HSystem::KvValue value : " + value + "kV Dac Value : " + kvdacvalue));
        setSerialPort.SerialSend(3, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.KV_VALUE, bytevalue);
    }

    public static void MaValue(int value, int madacvalue) {
        // mA value(2byte, 10mA~500mA, 설정된 mA의 min/max에 의해 제한),
        // DAC Value(2 byte, 0~4095)
        byte[] byteMaValue = ConvertIntToByteArray(2, value);
        byte[] byteDacValue = ConvertIntToByteArray(2, madacvalue);
        byte[] bytevalue = new byte[4];
        System.arraycopy(byteMaValue, 0, bytevalue, 0, 2);
        System.arraycopy(byteDacValue, 0, bytevalue, 2, 2);

        LogUtil.i(String.format("T5HSystem::mAValue value : " + value + ", dac : " + madacvalue));
        //byte[] bytevalue = ConvertIntToByteArray(4,value);
        //LogUtil.i(String.format("SetSerialPort mAValue [0] : "+"%02X ", bytevalue[0]));
        setSerialPort.SerialSend(4, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.MA_VALUE, bytevalue);
    }

    public static void TimeValue(double value) {
        // Unit(ms) 1 ~ 10000 (Console set Time - ms Table : Exposure Time)
//        LogUtil.i(String.format("T5HSystem::TimeValue value : " + value));
//        byte[] bytevalue = ConvertIntToByteArray(2, value);
//        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TIME_VALUE, bytevalue);
        String val = String.valueOf(value);
        String[] array = val.split("\\.");
        LogUtil.i(String.format("T5HSystem::TimeValue Micro value : " + Arrays.toString(array)));
        int intVal = Integer.parseInt(array[0]);
        String flo = array[1];
        if (flo.length() == 2) {
            flo = flo.substring(0, 1);
            LogUtil.i("Float : " + flo.substring(0, 1));
        }
        int floVal = Integer.parseInt(flo);
        byte[] bytevalue1 = ConvertIntToByteArray(2, intVal);
        byte[] bytevalue2 = ConvertIntToByteArray(1, floVal);
        byte[] bytevalue = new byte[3];
        System.arraycopy(bytevalue1, 0, bytevalue, 0, 2);
        System.arraycopy(bytevalue2, 0, bytevalue, 2, 1);
//            byte[] bytevalue = ConvertIntToByteArray(3, (int) value * 100);
        setSerialPort.SerialSend(3, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TIME_VALUE, bytevalue);
        LogUtil.i(String.format("T5HSystem::TimeValue Micro value : " + Arrays.toString(bytevalue)));
    }

    public static void DisSetTimeValue(int value) {
        // Unit(ms) 1 ~ 10000 (Console Set Time : mA Feed Back Value Check Time)
        LogUtil.i(String.format("T5HSystem::DisSetTimeValue value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.DIS_SET_TIME_VALUE, bytevalue);
    }

    // 0 : Large, 1 : Small
    public static void FocusSelect(int value) {
        LogUtil.i(String.format("T5HSystem::FocusSelect value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.FOCUS, bytevalue);
    }

    public static void BuckySelect(int value) {
        LogUtil.i(String.format("T5HSystem::BuckySelect value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.BUCKY_SELECT, bytevalue);
    }

    // 0 : Non, 1:AEC chamber 1, 2:AEC chamber 2
    // 따로 사용안함
    public static void AECCHSelect(int value) {
        LogUtil.i(String.format("T5HSystem::AEC_CH_Select value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AEC_CH_SELECT, bytevalue);
    }

    public static void AECFieldControl2() {
        //LogUtil.i("T5HSystem::AECFieldControl2 Field L: "+ _aecFieldOn_L + " B: " + _aecFieldOn_B + " R: "+ _aecFieldOn_R);

        if (_aecFieldOn_L == false && _aecFieldOn_C == false && _aecFieldOn_R == true) {
            MainCenterView.field_L.setChecked(false);
            MainCenterView.field_C.setChecked(false);
            MainCenterView.field_R.setChecked(true);
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == true && _aecFieldOn_R == false) {
            MainCenterView.field_L.setChecked(false);
            MainCenterView.field_C.setChecked(true);
            MainCenterView.field_R.setChecked(false);
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == true && _aecFieldOn_R == true) {
            MainCenterView.field_L.setChecked(false);
            MainCenterView.field_C.setChecked(true);
            MainCenterView.field_R.setChecked(true);
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == false && _aecFieldOn_R == false) {
            MainCenterView.field_L.setChecked(true);
            MainCenterView.field_C.setChecked(false);
            MainCenterView.field_R.setChecked(false);
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == false && _aecFieldOn_R == true) {
            MainCenterView.field_L.setChecked(true);
            MainCenterView.field_C.setChecked(false);
            MainCenterView.field_R.setChecked(true);
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == true && _aecFieldOn_R == false) {
            MainCenterView.field_L.setChecked(true);
            MainCenterView.field_C.setChecked(true);
            MainCenterView.field_R.setChecked(false);
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == true && _aecFieldOn_R == true) {
            MainCenterView.field_L.setChecked(true);
            MainCenterView.field_C.setChecked(true);
            MainCenterView.field_R.setChecked(true);
        }
        AECFieldControl();
    }

    // _buckyselect == 1 : Bucky1(Stand), _buckyselect == 2 : Bucky2(Table)
    public static void AECFieldControl() {
        int sendValue = 0;
        LogUtil.i("AECFieldControl : " + _aecFieldOn_L + " , " + _aecFieldOn_C + " , " + _aecFieldOn_R);
        // bucky check
        if (_buckyselect == 1) {
            // Stand
            if (SysData.AECDirectionBucky1.toString().equalsIgnoreCase("L")) {
                sendValue = leftAECFieldControl();
            } else {
                sendValue = rightAECFieldControl();
            }
        } else if (_buckyselect == 2) {
            // Table
            if (SysData.AECDirectionBucky2.toString().equalsIgnoreCase("L")) {
                sendValue = leftAECFieldControl();
            } else {
                sendValue = rightAECFieldControl();
            }
        }

        AECFieldSelect(sendValue);
    }

    // AEC Field Left Control
    public static int leftAECFieldControl() {
        int sendValue = 0;

        LogUtil.i("T5HSystem::AECFieldControl Field Type L");
        if (_aecFieldOn_L == false && _aecFieldOn_C == false && _aecFieldOn_R == false) {
            sendValue = 0;
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == false && _aecFieldOn_R == true) {
            sendValue = 1;
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == true && _aecFieldOn_R == false) {
            sendValue = 2;
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == true && _aecFieldOn_R == true) {
            sendValue = 3;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == false && _aecFieldOn_R == false) {
            sendValue = 4;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == false && _aecFieldOn_R == true) {
            sendValue = 5;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == true && _aecFieldOn_R == false) {
            sendValue = 6;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == true && _aecFieldOn_R == true) {
            sendValue = 7;
        }

        return sendValue;
    }

    public static int rightAECFieldControl() {
        int sendValue = 0;

        LogUtil.i("T5HSystem::AECFieldControl Field Type R");
        if (_aecFieldOn_L == false && _aecFieldOn_C == false && _aecFieldOn_R == false) {
            sendValue = 0;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == false && _aecFieldOn_R == false) {
            sendValue = 1;
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == true && _aecFieldOn_R == false) {
            sendValue = 2;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == true && _aecFieldOn_R == false) {
            sendValue = 3;
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == false && _aecFieldOn_R == true) {
            sendValue = 4;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == false && _aecFieldOn_R == true) {
            sendValue = 5;
        }
        if (_aecFieldOn_L == false && _aecFieldOn_C == true && _aecFieldOn_R == true) {
            sendValue = 6;
        }
        if (_aecFieldOn_L == true && _aecFieldOn_C == true && _aecFieldOn_R == true) {
            sendValue = 7;
        }

        return sendValue;
    }

    public static void AECFieldControlCali() {
        int sendValue = 0;
        if (SysData.AECDirectionBucky2.toString().equalsIgnoreCase("L")) {
            LogUtil.i("T5HSystem::AECFieldControl Field Type L");

            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 0;
            }
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 1;
            }
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 2;
            }
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 3;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 4;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 5;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 6;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 7;
            }
        } else {
            LogUtil.i("T5HSystem::AECFieldControlCali Field Type R");
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 0;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 1;
            }
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 2;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == false) {
                sendValue = 3;
            }
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 4;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == false && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 5;
            }
            if (_aecFieldOn_L_CaliAEC == false && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 6;
            }
            if (_aecFieldOn_L_CaliAEC == true && _aecFieldOn_C_CaliAEC == true && _aecFieldOn_R_CaliAEC == true) {
                sendValue = 7;
            }
        }
        AECFieldSelect(sendValue);
    }

    public static void AECFieldSelect(int value) {
        LogUtil.i(String.format("T5HSystem::AECFieldSelect : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AEC_FIELD_SELECT, bytevalue);
    }

    // AUX On/Off 0:Off, 1:On
    public static void AUXOnOff(int value) {
        LogUtil.i(String.format("T5HSystem::AUXOnOff : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AUX_ON_OFF, bytevalue);
        _aux = value; // Elui 사용
    }

    // Ready On/Off (0:Off, 1:On)
    public static void ReadyControl(int value) {
        LogUtil.i(String.format("T5HSystem::ReadyControl Select : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.READY_SW, bytevalue);
    }

    // Exposure On/Off (0:Off, 1:On)
    public static void ExposureControl(int value) {
        LogUtil.i(String.format("T5HSystem::ExposureControl Select : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.EXPOSURE_SW, bytevalue);
    }

    // Calibration Mode 선택 ( 0:Non, 1:kV Calibration, 2:mA Calibration )
    public static void CalibrationMode(int value) {
        LogUtil.i(String.format("T5HSystem::CalibrationMode Select : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.CAL_MODE, bytevalue);
    }

    // Calibration 동작제어 ( 0:Stop, 1:Start, 2:Pause, 3: Restart )
    public static void CaliControl(int value) {
        LogUtil.i(String.format("T5HSystem::CaliControl : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.CAL_CONTROL, bytevalue);
    }

    // 100mA 미만 : 0, 이상 : 1 보낸다. 0:x1, 1:x10
    public static void SelectmAGain(int value) {
        LogUtil.i(String.format("T5HSystem::SelectmAGain : " + value));
        byte[] bytevalue = ConvertIntToByteArray(1, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.MA_GAIN_SELECT, bytevalue);
    }

    // Unit(%), 1 ~ 50(0.1~0.5%)
    // mA *  배수 = 비율, Target mA * 비율 = SMALL_MA_STEP_VALUE
    // mADAC * 계산 = 비율은 가지고있어야된다.
    public static void SmallmAStepValue(int value) {
        LogUtil.i(String.format("T5HSystem::SmallmAStepValue : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.SMALL_MA_STEP_VALUE, bytevalue);
    }

    // Unit(%), 1 ~ 50(0.1~0.5%)
    // mA *  배수 = 비율, Target mA * 비율 = LARGE_MA_STEP_VALUE
    public static void LargemAStepValue(int value) {
        LogUtil.i(String.format("T5HSystem::LargemAStepValue : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.LARGE_MA_STEP_VALUE, bytevalue);
    }

    public static void AECRef(int value) {
        // DAC Value(2 byte, 0~4095)
        // 0 ~ 4095 Ref 값에 대한 제한 적용 0 이하로 되면 0 , 4095 이상으로 되면 4095로 재적용
        if (value < 0) {
            value = 0;
        } else if (value > 4095) {
            value = 4095;
        }
        LogUtil.i(String.format("T5HSystem::SetSerialPort, AECRef : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.AEC_REF, bytevalue);
    }

    // 절연내력시험 사용
    public static void kvExposureModeSet(int format, int time) {
        LogUtil.i(String.format("T5HSystem::kvExposureModeSet 0 value : " + format + " Time : " + time));
        byte[] byteformatValue = ConvertIntToByteArray(1, format);
        byte[] bytetimeValue = ConvertIntToByteArray(2, time);
        byte[] bytevalue = new byte[3];
        System.arraycopy(byteformatValue, 0, bytevalue, 0, 1);
        System.arraycopy(bytetimeValue, 0, bytevalue, 1, 2);
        setSerialPort.SerialSend(3, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.T_KV_EXPOSURE_MODE_SET, bytevalue);
    }

    // 절연내력시험 사용
    public static void kvExposureModeStop(int value) {
        LogUtil.i(String.format("T5HSystem::kvExposureModeStop 1 value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(0, value);
        setSerialPort.SerialSend(1, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.T_KV_EXPOSURE_MODE_STOP, bytevalue);
    }

    // 절연내력시험 사용
    public static void FocusSmallCurrentStandBy(int value) {
        LogUtil.i(String.format("T5HSystem::FocusSmallCurrentStandBy value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TUBE_FOCUS_SMALL_CURRENT_STANDBY, bytevalue);
    }

    // 절연내력시험 사용
    public static void FocusLargeCurrentStandBy(int value) {
        LogUtil.i(String.format("T5HSystem::FocusLargeCurrentStandBy value : " + value));
        byte[] bytevalue = ConvertIntToByteArray(2, value);
        setSerialPort.SerialSend(2, ControlCommandT5H.COMM_CONTROL, ActionCommandT5H.TUBE_FOCUS_LARGE_CURRENT_STANDBY, bytevalue);
    }

    // double kv, int kvdac, double ma, int madac, double ms, int focus, int bucky
    public static void ReadySwitchOn(double kv, int kvdac, double ma, int madac, double ms, int focus, int bucky) {
        // 조사관련 정보 보내기 (KV_VALUE, MA_VALUE, TIME_VALUE, BUCKY_SELECT, OVER_MA_REF, OVER_KV_REF)
        // Find kV, mA DAC Value
        kvdac = FindFinalKvDACValueTable(kv);
        if (!_isAutoCalimA)
            madac = FindFinalMaDACValueTable(focus, ma, (int) kv);

        KvValue((int) kv, kvdac);                                                    // 1. Send kV Value
        MaValue((int) ma, madac);                                                    // 2. Send mA Value
        //TimeValue((int) ms);														// 3. Send Time Value
        if (_isAecOn && _t5hStatus != Status.mACalibration && _t5hStatus != Status.AutoExpose && _t5hStatus != Status.ScopeMode) {
            double PercentResultValue = 0;
            if (_t5hStatus != Status.Normal) {
                TimeValue((double) SysData.AECBackupTime.toInteger());                            // 3. Send Time Value

            } else {
                // AEC 사용 시 AEC Back Up Time 으로 MS 값 전송
                // 이때 Max Time 보다 AEC Back UP time 이 크면 Max Time 값으로 전송
                // 이때 APR 을 사용하고 있고 APR Time USE 를 체크 한 옵션 상태이면 퍼센트로 계산하여 전송
                operationManager.range msRange = opMgr.getRange_ms(opMgr.castFocusFrom(focus), (int) kv, (float) ma);
                PercentResultValue = ms * (SysData.aprModeAECBACKUPTIME.toDouble() / 100);
                boolean checkAECTime = msRange.max < SysData.AECBackupTime.toInteger();
                boolean checkAECPercentTime = SysData.MaxExposureTime.toInteger() < PercentResultValue;
                if (SysData.aprModeUseTime.toString().equals("1") && AprcsvManager.Main_Selected_ViewPosition != null) {
                    if (SysData.AECBackupTime.toInteger() < PercentResultValue) {
                        if (!checkAECTime) {
                            TimeValue((double) SysData.AECBackupTime.toInteger());
                        } else {
                            TimeValue((double) msRange.max);
                        }
                    } else {
                        if (!checkAECPercentTime) {
                            TimeValue(PercentResultValue);
                        } else {
                            TimeValue((double) msRange.max);
                        }
                    }
                } else {
                    if (!checkAECTime) {
                        TimeValue((double) SysData.AECBackupTime.toInteger());
                    } else {
                        TimeValue((double) msRange.max);
                    }
                }
            }
            LogUtil.i("T5HSystem::ReadySwitchOn-0 AEC On kV: " + (int) kv + " mA: " + ma + "ms : " + ms + "Fixed time: " + (int) SysData.AECBackupTime.toInteger() + " Adapted Time : " + PercentResultValue);

        } else {
            // 확인 필요 :: ms Gap 기능 삭제?
            double msgap = (double) Math.round(FindFinalMsGapValueTable(focus, ma, (int) kv) * 10)
                    / 10;

            double finaltimecheck = (double) Math.round((ms + msgap) * 10) / 10;

            if (finaltimecheck < 1) finaltimecheck = 1;

            LogUtil.i("T5HSystem::ReadySwitchOn-0 No AEC kV: " + (int) kv + " focus:" + focus + " mA: " + ma + " timeGap: " + msgap + " final mS: " + finaltimecheck);

            TimeValue(finaltimecheck);                                                    // 3. Send Time Value + Gap
            //TimeValue(ms);
            DisSetTimeValue((int) ms);                                                    // 3.1. Send DIS Time Value(Time Value)
        }
        // Gain x 1
        if (ma < 80) {
            SelectmAGain(0);                                                    // 4. Send Gain Value (x1)
            if (focus == 0)            // Large Focus
            {
                if (SysData.DACBoost.toInteger() == 0) {
                    FocusLargeCurrentBoostValue(madac);                                // 5. Send Boost Value(Large, Boost Off)
                } else {
                    double boostvalLarge = 1 + SysData.FocusLargeCurrentBoostGain_1.toDouble() / 100;
                    FocusLargeCurrentBoostValue((int) (madac * boostvalLarge));        // 5. Send Boost Value(Large, Boost On)
                }
                Double largeStep = madac * SysData.StepmALargeGain_1.toDouble() / 100;
                LargemAStepValue(largeStep.intValue());                                // 6. Send Step Value(Large)
                LogUtil.i("T5HSystem::ReadySwitchOn-1 Large Gain x1 Boost: " + SysData.FocusLargeCurrentBoostGain_1 + "% Step: " + SysData.StepmALargeGain_1);
            } else                    // Small Focus
            {
                if (SysData.DACBoost.toInteger() == 0) {
                    FocusSmallCurrentBoostValue(madac);                                // 5. Send Boost Value(Small, Boost Off)
                } else {
                    double boostvalSmall = 1 + SysData.FocusSmallCurrentBoostGain_1.toDouble() / 100;
                    FocusSmallCurrentBoostValue((int) (madac * boostvalSmall));        // 5. Send Boost Value(Small, Boost On)
                }
                Double smallStep = madac * SysData.StepmASmallGain_1.toDouble() / 100;
                SmallmAStepValue(smallStep.intValue());                                // 6. Send Step Value(Small)
                LogUtil.i("T5HSystem::ReadySwitchOn-1 Small Gain x1 Boost: " + SysData.FocusSmallCurrentBoostGain_1 + "% Step: " + SysData.StepmASmallGain_1);
            }
        } else    // Gain x10
        {
            SelectmAGain(1);                                                    // 4. Send Gain Value (x10)
            if (focus == 0)            // Large Focus
            {
                if (SysData.DACBoost.toInteger() == 0) {
                    FocusLargeCurrentBoostValue(madac);                                // 5. Send Boost Value(Large, Boost Off)
                } else {
                    if (ma > 160)        // Gain x10-2 적용
                    {
                        double boostvalLarge = 1 + SysData.FocusLargeCurrentBoostGain_10_2.toDouble() / 100;
                        FocusLargeCurrentBoostValue((int) (madac * boostvalLarge));        // 5. Send Boost Value(Large, Boost On)
                        Double largeStep = madac * SysData.StepmALargeGain_10_2.toDouble() / 100;
                        LargemAStepValue(largeStep.intValue());                            // 6. Send Step Value(Large)
                        LogUtil.i("T5HSystem::ReadySwitchOn-1 Large Gain x10-2 Boost: " + SysData.FocusLargeCurrentBoostGain_10_2 + "% Step: " + SysData.StepmALargeGain_10_2);
                    } else                // Gain x10-1 적용
                    {
                        double boostvalLarge = 1 + SysData.FocusLargeCurrentBoostGain_10_1.toDouble() / 100;
                        FocusLargeCurrentBoostValue((int) (madac * boostvalLarge));        // 5. Send Boost Value(Large, Boost On)
                        Double largeStep = madac * SysData.StepmALargeGain_10.toDouble() / 100;
                        LargemAStepValue(largeStep.intValue());                            // 6. Send Step Value(Large)
                        LogUtil.i("T5HSystem::ReadySwitchOn-1 Large Gain x10-1 Boost: " + SysData.FocusLargeCurrentBoostGain_10_1 + "% Step: " + SysData.StepmALargeGain_10);
                    }
                }
                //2024.08.01 수정
//                Double largeStep = madac * SysData.StepmALargeGain_10.toDouble() / 100;
//                LargemAStepValue(largeStep.intValue());                                // 6. Send Step Value(Large)
                //LogUtil.i("T5HSystem::ReadySwitchOn-1 Large Gain x10 Boost: " + SysData.FocusLargeCurrentBoostGain_10_1 + "% Step: " + SysData.StepmALargeGain_10);
            } else                    // Small Focus
            {
                if (SysData.DACBoost.toInteger() == 0) {
                    FocusSmallCurrentBoostValue(madac);                                // 4. Send Boost Value(Small, Boost Off)
                } else {
                    double boostvalSmall = 1 + SysData.FocusSmallCurrentBoostGain_10.toDouble() / 100;
                    FocusSmallCurrentBoostValue((int) (madac * boostvalSmall));        // 5. Send Boost Value(Small, Boost On)
                }
                Double smallStep = madac * SysData.StepmASmallGain_10.toDouble() / 100;
                SmallmAStepValue(smallStep.intValue());                                // 6. Send Step Value(Small)
                LogUtil.i("T5HSystem::ReadySwitchOn-1 Small Gain x10 Boost: " + SysData.FocusSmallCurrentBoostGain_10 + "% Step: " + SysData.StepmASmallGain_10);
            }
        }

        // AEC Reference값 추가 (작업중)
        if (_isAecOn && _t5hStatus != Status.mACalibration && _t5hStatus != Status.AutoExpose) {
            // 기존
            int bk1 = FindFinalAECDACValueTable(1, kv);
            int bk2 = FindFinalAECDACValueTable(2, kv);
            // 보정치
            double correct_level = 1;
            double correct_density = 1;

            if (_aecLevel == 0) {
                //correct_level = 0.5;
                correct_level = 2;
            } else if (_aecLevel == 1) {
                correct_level = 1;
            } else if (_aecLevel == 2) {
                //correct_level = 2;
                correct_level = 0.5;
            }
            switch (_densityStep) {
                case -5:
                    correct_density = 0.5;
                    break;
                case -4:
                    correct_density = 0.6;
                    break;
                case -3:
                    correct_density = 0.7;
                    break;
                case -2:
                    correct_density = 0.8;
                    break;
                case -1:
                    correct_density = 0.9;
                    break;
                case 0:
                    correct_density = 1;
                    break;
                case 1:
                    correct_density = 1.2;
                    break;
                case 2:
                    correct_density = 1.4;
                    break;
                case 3:
                    correct_density = 1.6;
                    break;
                case 4:
                    correct_density = 1.8;
                    break;
                case 5:
                    correct_density = 2;
                    break;
                default:
                    break;
            }
            //설정된 kV에 대한 Index 별 DAC 값 (보정 후)
            _bucky1DAC = (int) Math.round(bk1 * correct_level * correct_density);
            _bucky2DAC = (int) Math.round(bk2 * correct_level * correct_density);

            if (_buckyselect == 1) {
                T5HSystem.AECRef(_bucky1DAC);                            // 7. Send AEC Reference Value
                LogUtil.i("T5HSystem::ReadySwitchOn-2-0 AEC ON: " + _isAecOn + " Bucky: " + _buckyselect + " AEC Ref: " + _bucky1DAC);
            } else if (_buckyselect == 2) {
                T5HSystem.AECRef(_bucky2DAC);                            // 7. Send AEC Reference Value
                LogUtil.i("T5HSystem::ReadySwitchOn-2-0 AEC ON: " + _isAecOn + " Bucky: " + _buckyselect + " AEC Ref: " + _bucky2DAC);
            }
        }
        LogUtil.i("T5HSystem::ReadySwitchOn-1-0 _maAutoCaliStop : " + _maAutoCaliStop);
        // mA AutoCalibration이 중간에 멈출경우 CommandDone보내지 않는다
        //if(!_maAutoCaliStop)
        MaMaxRating((int) TubeTableManager.FindMaMaxValue(focus, kv));
        CommandDone(1);                                                        // 7. Command Done (0:False, 1:True)

        if (_isAecOn)
            LogUtil.i("T5HSystem::ReadySwitchOn-2 AEC On kV: " + kv + "(" + kvdac + ")" + " mA: " + ma + "(" + madac + ")" + " mS: " + (int) SysData.AECBackupTime.toInteger() + " Bucky: " + bucky);
        else
            LogUtil.i("T5HSystem::ReadySwitchOn-2 AEC Off kV: " + kv + "(" + kvdac + ")" + " mA: " + ma + "(" + madac + ")" + " mS: " + ms + " Bucky: " + bucky);


        // System Status로 Ready Status 보내기 (mA Calibration에서는 사용 안함)
        if (!T5HSystem._isAutoCalimA && (_t5hStatus == Status.Normal || _t5hStatus == Status.AutoExpose)) {
            SendSystemStatus(4);                                                // 8. Send To Ready Status
            LogUtil.i("T5HSystem::ReadySwitchOn Send to Ready Status");
        }
    }


    /**
     * 2024.02.15 MS 추가
     * 피드백 값 들어오면 옵션값에 설정되 있는 공차비율에 따라 - + 초과 미만 이 되면 옵션값에 설정 되 있는 Ratio Limit Count Up
     * 지정되 있는 Limit Count 값에 도달하면 Warning 표시
     * Time FeedBack 값 들어오는 구간에 넣기
     * 순서 kV -> mA -> kW -> ms -> mAs
     **/
    public static int CalFeedBackRatio(double kVFeedBack, double mAFeedBack, double msFeedBack) {
        // mas Value
        double masFB = mAFeedBack * msFeedBack / 1000;
        double kW_Value = (_kv * _ma) / 1000;
        double FbkW_Value = (kVFeedBack * mAFeedBack) / 1000;
        LogUtil.i(TAG, "CalFeedBackRatio::Send Value : " + _kv + " , " + _ma + " , " + _ms + " , " + _mas + " , " + kW_Value);
        LogUtil.i(TAG, "CalFeedBackRatio::Receive Value : " + kVFeedBack + " , " + mAFeedBack + " , " + msFeedBack + " , " + masFB + " , " + FbkW_Value);
        if (moreCheck(PercentBigdecimal(_kv, SysData.kVFeedBackRatio.toDouble(), false), kVFeedBack)
                || lessCheck(PercentBigdecimal(_kv, SysData.kVFeedBackRatio.toDouble(), true), kVFeedBack)) {
            kV_Ratio_Limit_Count++;
            kV_Ratio_Limit++;
            Ratio_WarningNumber = 18;
            LogUtil.i("T5HSystem::CalFeedBackRatio:: kV FeedBack Value : " + kVFeedBack + ", kV Value : " + _kv);
            LogUtil.i("T5HSystem::CalFeedBackRatio:: kV 최소값 : " + PercentBigdecimal(_kv, SysData.kVFeedBackRatio.toDouble(), false)
                    + ", kV 최대값 : " + PercentBigdecimal(_kv, SysData.kVFeedBackRatio.toDouble(), true));
            return 18;
        }

        if (moreCheck(PercentBigdecimal(_ma, SysData.mAFeedBackRatio.toDouble(), false), mAFeedBack)
                || lessCheck(PercentBigdecimal(_ma, SysData.mAFeedBackRatio.toDouble(), true), mAFeedBack)) {
            ma_Ratio_Limit_Count++;
            ma_Ratio_Limit++;
            Ratio_WarningNumber = 19;
            LogUtil.i("T5HSystem::CalFeedBackRatio:: mA FeedBack Value : " + mAFeedBack + ", mA Value : " + _ma);
            LogUtil.i("T5HSystem::CalFeedBackRatio:: mA 최소값 : " + PercentBigdecimal(_ma, SysData.mAFeedBackRatio.toDouble(), false)
                    + ", mA 최대값 : " + PercentBigdecimal(_ma, SysData.mAFeedBackRatio.toDouble(), true));
            return 19;
        }

        if (moreCheck(PercentBigdecimal(kW_Value, SysData.kWRatio.toDouble(), false), FbkW_Value)
                || lessCheck(PercentBigdecimal(kW_Value, SysData.kWRatio.toDouble(), true), FbkW_Value)) {
            kW_Ratio_Limit_Count++;
            kW_Ratio_Limit++;
            Ratio_WarningNumber = 17;
            LogUtil.i("T5HSystem::CalFeedBackRatio:: KW FeedBack Value : " + FbkW_Value + ", KW Value : " + kW_Value);
            LogUtil.i("T5HSystem::CalFeedBackRatio:: kW 최소값 : " + PercentBigdecimal(kW_Value, SysData.kWRatio.toDouble(), false) +
                    ", KW 최대값 : " + PercentBigdecimal(kW_Value, SysData.kWRatio.toDouble(), true));
            return 17;
        }

        if (moreCheck(PercentBigdecimal(_ms, SysData.msFeedBackRatio.toDouble(), false), msFeedBack)
                || lessCheck(PercentBigdecimal(_ms, SysData.msFeedBackRatio.toDouble(), true), msFeedBack)) {
            ms_Ratio_Limit_Count++;
            ms_Ratio_Limit++;
            Ratio_WarningNumber = 21;
            LogUtil.i("T5HSystem::CalFeedBackRatio:: ms FeedBack Value : " + msFeedBack + ", ms Value : " + _ms);
            LogUtil.i("T5HSystem::CalFeedBackRatio:: ms 최소값 : " + PercentBigdecimal(_ms, SysData.msFeedBackRatio.toDouble(), false)
                    + ", ms 최대값 : " + PercentBigdecimal(_ms, SysData.msFeedBackRatio.toDouble(), true));
            return 21;
        }

        if (moreCheck(PercentBigdecimal(_mas, SysData.mAsFeedBackRatio.toDouble(), false), masFB)
                || lessCheck(PercentBigdecimal(_mas, SysData.mAsFeedBackRatio.toDouble(), true), masFB)) {
            mAs_Ratio_Limit_Count++;
            mAs_Ratio_Limit++;
            Ratio_WarningNumber = 20;
            LogUtil.i("T5HSystem::CalFeedBackRatio:: mAs FeedBack Value : " + masFB + ", mAs Value : " + _mas);
            LogUtil.i("T5HSystem::CalFeedBackRatio:: mAs 최소값 : " + PercentBigdecimal(_mas, SysData.mAsFeedBackRatio.toDouble(), false)
                    + ", mAs 최대값 : " + PercentBigdecimal(_mas, SysData.mAsFeedBackRatio.toDouble(), true));
            return 20;
        }

        return 0;
    }

    /**
     * boolean 값이 true 일떄는 plus, false 일떄는 minus
     **/
    public static double PercentBigdecimal(double value, double option, boolean plusMinus) {
        double result;
        double Percent = value * option / 100;
        BigDecimal data = new BigDecimal(String.valueOf(Percent));
        BigDecimal valuedata = new BigDecimal(String.valueOf(value));

        if (plusMinus) {
            result = valuedata.add(data).doubleValue();
            return result;
        } else {
            result = valuedata.subtract(data).doubleValue();
            return result;
        }
    }

    public static boolean lessCheck(double a, double b) {
        BigDecimal aVal = new BigDecimal(String.valueOf(a));
        BigDecimal bVal = new BigDecimal(String.valueOf(b));
        int compareResult = aVal.compareTo(bVal);
        if (compareResult < 0) {
            // a가 b보다 작다
            return true;
        } else {
            return false;
        }
    }

    public static boolean moreCheck(double a, double b) {
        BigDecimal aVal = new BigDecimal(String.valueOf(a));
        BigDecimal bVal = new BigDecimal(String.valueOf(b));
        int compareResult = aVal.compareTo(bVal);
        if (compareResult > 0) {
            // a가 b보다 크다
            return true;
        } else {
            return false;
        }
    }

    public static boolean checkExposureControl(int kv, double ma, double ms, double mAs, int focus) {
        try {
            boolean exposureCheck = opMgr.getRange_kV().min <= kv
                    && kv <= opMgr.getRange_kV().max
                    && opMgr.getRange_mA().min <= ma
                    && ma <= opMgr.getRange_mA().max
                    && opMgr.getRange_ms(opMgr.castFocusFrom(focus), kv, (float) ma).min <= ms
                    && ms <= opMgr.getRange_ms(opMgr.castFocusFrom(focus), kv, (float) ma).max
                    && opMgr.getRange_mAs().min <= mAs
                    && mAs <= opMgr.getRange_mAs().max;
            return exposureCheck;
        } catch (NullPointerException e) {
            return false;
        }
    }

    public static void ChartSetting(LineChart chart) {
        //그래프에 수치 구분선
        chart.setDrawGridBackground(true);
        //배경화면 : 검은색
        chart.setBackgroundColor(Color.BLACK);
        chart.setGridBackgroundColor(Color.BLACK);

        //Description Text 화면 우측 하단에 나오는 Text 설정
        chart.getDescription().setEnabled(true);

        Description des = chart.getDescription();
        des.setEnabled(true);
        if (_t5hStatus == Status.kVExpose) {
            des.setText("Sec");
        } else {
            des.setText("MS");                                                // Text 입력
        }
        des.setTextSize(15f);
        des.setTextColor(Color.WHITE);

        chart.getAxisRight().setEnabled(false);
        XAxis xAxis = chart.getXAxis();

        xAxis.setTextSize(15f);
        xAxis.setTextColor(Color.WHITE);
        xAxis.setLabelCount(10);                                         //X축 라벨표시 개수
        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        xAxis.setDrawAxisLine(true);
        xAxis.setDrawGridLines(true);                                  // X축 Grid 라인 표시 여부
        xAxis.setEnabled(true);

        //legend (화면 하단에 있는 글씨 제어)
        Legend l = chart.getLegend();
        l.setEnabled(true);
        l.setFormSize(10f);
        l.setTextSize(12f);
        l.setTextColor(Color.WHITE);

        //Y축 제어
        YAxis leftAxis = chart.getAxisLeft();
        leftAxis.setTextSize(15f);
        leftAxis.setEnabled(true);
        leftAxis.setTextColor(Color.WHITE);
        leftAxis.setDrawGridLines(true);                    // Y축 Grid 라인 표시 여부
        leftAxis.setGridColor(Color.rgb(128, 128, 128));
        // Y축 Scale 제한수 설정 ( 미니멈, 맥시멈 )
        // Y축 라벨 고정
        // Fliament Rotor Chart
        if (Scope_ScanData == 2 || Scope_ScanData == 3) {
            leftAxis.setAxisMinimum(SysData.FilamentMin.toFloat());
            leftAxis.setAxisMaximum(SysData.FilamentMax.toFloat() + 1);
        }
        // kVExpose Chart
        YAxis rightAxis = chart.getAxisRight();
        rightAxis.setEnabled(false);
        chart.invalidate();
    }

    /**
     * 소수점 둘째자리까지 디스플레이
     */
    public static String formatDouble(double value) {
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        return decimalFormat.format(value);
    }
}
